
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c78  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004f18  08004f18  00005f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004f9c  08004f9c  00005f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004fa4  08004fa4  00005fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08004fa8  08004fa8  00005fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08004fac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000224  24000088  08005034  00006088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002ac  08005034  000062ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fb1e  00000000  00000000  000060b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002045  00000000  00000000  00015bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b48  00000000  00000000  00017c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000898  00000000  00000000  00018768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036eab  00000000  00000000  00019000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f739  00000000  00000000  0004feab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001597d7  00000000  00000000  0005f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b8dbb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003514  00000000  00000000  001b8e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001bc314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004f00 	.word	0x08004f00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08004f00 	.word	0x08004f00

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b0:	f000 f8f2 	bl	8000898 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fd3a 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f84c 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 f8b4 	bl	8000828 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fb07 	bl	8000cd4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 fb04 	bl	8000cd4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006cc:	2002      	movs	r0, #2
 80006ce:	f000 fb01 	bl	8000cd4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006d2:	2101      	movs	r1, #1
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 fbc7 	bl	8000e68 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006da:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <main+0x9c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <main+0x9c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <main+0x9c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <main+0x9c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <main+0x9c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006fa:	4913      	ldr	r1, [pc, #76]	@ (8000748 <main+0x9c>)
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 fc37 	bl	8000f70 <BSP_COM_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <main+0x60>
  {
    Error_Handler();
 8000708:	f000 f906 	bl	8000918 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 800070c:	480f      	ldr	r0, [pc, #60]	@ (800074c <main+0xa0>)
 800070e:	f003 fd8b 	bl	8004228 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fb54 	bl	8000dc0 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fb51 	bl	8000dc0 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 800071e:	2002      	movs	r0, #2
 8000720:	f000 fb4e 	bl	8000dc0 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <main+0xa4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d1fb      	bne.n	8000724 <main+0x78>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 800072c:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <main+0xa4>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fb6e 	bl	8000e14 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000738:	2001      	movs	r0, #1
 800073a:	f000 fb6b 	bl	8000e14 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 800073e:	2002      	movs	r0, #2
 8000740:	f000 fb68 	bl	8000e14 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 8000744:	e7ee      	b.n	8000724 <main+0x78>
 8000746:	bf00      	nop
 8000748:	240000a4 	.word	0x240000a4
 800074c:	08004f18 	.word	0x08004f18
 8000750:	240000b4 	.word	0x240000b4

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b09c      	sub	sp, #112	@ 0x70
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075e:	224c      	movs	r2, #76	@ 0x4c
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fdb5 	bl	80042d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2220      	movs	r2, #32
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fdaf 	bl	80042d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000774:	2002      	movs	r0, #2
 8000776:	f001 f947 	bl	8001a08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b28      	ldr	r3, [pc, #160]	@ (8000820 <SystemClock_Config+0xcc>)
 8000780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000782:	4a27      	ldr	r2, [pc, #156]	@ (8000820 <SystemClock_Config+0xcc>)
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800078a:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <SystemClock_Config+0xcc>)
 800078c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <SystemClock_Config+0xd0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <SystemClock_Config+0xd0>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <SystemClock_Config+0xd0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b0:	bf00      	nop
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <SystemClock_Config+0xd0>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007be:	d1f8      	bne.n	80007b2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2340      	movs	r3, #64	@ 0x40
 80007ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 f951 	bl	8001a7c <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007e0:	f000 f89a 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	233f      	movs	r3, #63	@ 0x3f
 80007e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2101      	movs	r1, #1
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fd91 	bl	8002330 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000814:	f000 f880 	bl	8000918 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3770      	adds	r7, #112	@ 0x70
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	58000400 	.word	0x58000400
 8000824:	58024800 	.word	0x58024800

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <MX_GPIO_Init+0x6c>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <MX_GPIO_Init+0x6c>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_GPIO_Init+0x6c>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_GPIO_Init+0x6c>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <MX_GPIO_Init+0x6c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085c:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <MX_GPIO_Init+0x6c>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_GPIO_Init+0x6c>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000870:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <MX_GPIO_Init+0x6c>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_GPIO_Init+0x6c>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	58024400 	.word	0x58024400

08000898 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008aa:	f000 fded 	bl	8001488 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008ba:	231f      	movs	r3, #31
 80008bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008be:	2387      	movs	r3, #135	@ 0x87
 80008c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008c6:	2300      	movs	r3, #0
 80008c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fe0b 	bl	80014f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008e2:	2004      	movs	r0, #4
 80008e4:	f000 fde8 	bl	80014b8 <HAL_MPU_Enable>

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000900:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <BSP_PB_Callback+0x24>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	240000b4 	.word	0x240000b4

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_MspInit+0x30>)
 800092c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000930:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_MspInit+0x30>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_MspInit+0x30>)
 800093c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	58024400 	.word	0x58024400

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 fc2f 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 fac6 	bl	8000f4c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e00a      	b.n	80009ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d6:	f3af 8000 	nop.w
 80009da:	4601      	mov	r1, r0
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	60ba      	str	r2, [r7, #8]
 80009e2:	b2ca      	uxtb	r2, r1
 80009e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf0      	blt.n	80009d6 <_read+0x12>
  }

  return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e009      	b.n	8000a24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fb0b 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf1      	blt.n	8000a10 <_write+0x12>
  }
  return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_close>:

int _close(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_isatty>:

int _isatty(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f003 fc4e 	bl	8004370 <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	24080000 	.word	0x24080000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	240000b8 	.word	0x240000b8
 8000b08:	240002b0 	.word	0x240002b0

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b10:	4b43      	ldr	r3, [pc, #268]	@ (8000c20 <SystemInit+0x114>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	4a42      	ldr	r2, [pc, #264]	@ (8000c20 <SystemInit+0x114>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b20:	4b40      	ldr	r3, [pc, #256]	@ (8000c24 <SystemInit+0x118>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	2b06      	cmp	r3, #6
 8000b2a:	d807      	bhi.n	8000b3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <SystemInit+0x118>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 030f 	bic.w	r3, r3, #15
 8000b34:	4a3b      	ldr	r2, [pc, #236]	@ (8000c24 <SystemInit+0x118>)
 8000b36:	f043 0307 	orr.w	r3, r3, #7
 8000b3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c28 <SystemInit+0x11c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a39      	ldr	r2, [pc, #228]	@ (8000c28 <SystemInit+0x11c>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <SystemInit+0x11c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b4e:	4b36      	ldr	r3, [pc, #216]	@ (8000c28 <SystemInit+0x11c>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4935      	ldr	r1, [pc, #212]	@ (8000c28 <SystemInit+0x11c>)
 8000b54:	4b35      	ldr	r3, [pc, #212]	@ (8000c2c <SystemInit+0x120>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b5a:	4b32      	ldr	r3, [pc, #200]	@ (8000c24 <SystemInit+0x118>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d007      	beq.n	8000b76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b66:	4b2f      	ldr	r3, [pc, #188]	@ (8000c24 <SystemInit+0x118>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 030f 	bic.w	r3, r3, #15
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c24 <SystemInit+0x118>)
 8000b70:	f043 0307 	orr.w	r3, r3, #7
 8000b74:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b76:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <SystemInit+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <SystemInit+0x11c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemInit+0x11c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <SystemInit+0x11c>)
 8000b8a:	4a29      	ldr	r2, [pc, #164]	@ (8000c30 <SystemInit+0x124>)
 8000b8c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <SystemInit+0x11c>)
 8000b90:	4a28      	ldr	r2, [pc, #160]	@ (8000c34 <SystemInit+0x128>)
 8000b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b94:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <SystemInit+0x11c>)
 8000b96:	4a28      	ldr	r2, [pc, #160]	@ (8000c38 <SystemInit+0x12c>)
 8000b98:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b9a:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <SystemInit+0x11c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ba0:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <SystemInit+0x11c>)
 8000ba2:	4a25      	ldr	r2, [pc, #148]	@ (8000c38 <SystemInit+0x12c>)
 8000ba4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <SystemInit+0x11c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <SystemInit+0x11c>)
 8000bae:	4a22      	ldr	r2, [pc, #136]	@ (8000c38 <SystemInit+0x12c>)
 8000bb0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <SystemInit+0x11c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <SystemInit+0x11c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c28 <SystemInit+0x11c>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <SystemInit+0x11c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <SystemInit+0x130>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <SystemInit+0x134>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bd6:	d202      	bcs.n	8000bde <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <SystemInit+0x138>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <SystemInit+0x11c>)
 8000be0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d113      	bne.n	8000c14 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <SystemInit+0x11c>)
 8000bee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <SystemInit+0x11c>)
 8000bf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <SystemInit+0x13c>)
 8000bfe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c02:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <SystemInit+0x11c>)
 8000c06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c0a:	4a07      	ldr	r2, [pc, #28]	@ (8000c28 <SystemInit+0x11c>)
 8000c0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c10:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00
 8000c24:	52002000 	.word	0x52002000
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c30:	02020200 	.word	0x02020200
 8000c34:	01ff0000 	.word	0x01ff0000
 8000c38:	01010280 	.word	0x01010280
 8000c3c:	5c001000 	.word	0x5c001000
 8000c40:	ffff0000 	.word	0xffff0000
 8000c44:	51008108 	.word	0x51008108
 8000c48:	52004000 	.word	0x52004000

08000c4c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <ExitRun0Mode+0x2c>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <ExitRun0Mode+0x2c>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c5c:	bf00      	nop
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <ExitRun0Mode+0x2c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f9      	beq.n	8000c5e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	58024800 	.word	0x58024800

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000cb8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c80:	f7ff ffe4 	bl	8000c4c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c84:	f7ff ff42 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f003 fb65 	bl	800437c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fcfb 	bl	80006ac <main>
  bx  lr
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cc0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000cc4:	08004fac 	.word	0x08004fac
  ldr r2, =_sbss
 8000cc8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000ccc:	240002ac 	.word	0x240002ac

08000cd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC3_IRQHandler>
	...

08000cd4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	@ 0x30
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d009      	beq.n	8000cfc <BSP_LED_Init+0x28>
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d006      	beq.n	8000cfc <BSP_LED_Init+0x28>
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d003      	beq.n	8000cfc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cf4:	f06f 0301 	mvn.w	r3, #1
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cfa:	e055      	b.n	8000da8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10f      	bne.n	8000d22 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000d02:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	4a2a      	ldr	r2, [pc, #168]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d12:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	e021      	b.n	8000d66 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10f      	bne.n	8000d48 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	e00e      	b.n	8000d66 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <BSP_LED_Init+0xe4>)
 8000d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <BSP_LED_Init+0xe8>)
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	f107 0218 	add.w	r2, r7, #24
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fc58 	bl	8001640 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <BSP_LED_Init+0xe8>)
 8000d94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <BSP_LED_Init+0xe4>)
 8000d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da0:	2200      	movs	r2, #0
 8000da2:	4619      	mov	r1, r3
 8000da4:	f000 fdfc 	bl	80019a0 <HAL_GPIO_WritePin>
  }

  return ret;
 8000da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3730      	adds	r7, #48	@ 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58024400 	.word	0x58024400
 8000db8:	08004f44 	.word	0x08004f44
 8000dbc:	2400000c 	.word	0x2400000c

08000dc0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d009      	beq.n	8000de8 <BSP_LED_On+0x28>
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d006      	beq.n	8000de8 <BSP_LED_On+0x28>
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d003      	beq.n	8000de8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000de0:	f06f 0301 	mvn.w	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e00b      	b.n	8000e00 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <BSP_LED_On+0x4c>)
 8000dec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <BSP_LED_On+0x50>)
 8000df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f000 fdd0 	bl	80019a0 <HAL_GPIO_WritePin>
  }

  return ret;
 8000e00:	68fb      	ldr	r3, [r7, #12]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2400000c 	.word	0x2400000c
 8000e10:	08004f44 	.word	0x08004f44

08000e14 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d009      	beq.n	8000e3c <BSP_LED_Toggle+0x28>
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d006      	beq.n	8000e3c <BSP_LED_Toggle+0x28>
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d003      	beq.n	8000e3c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e34:	f06f 0301 	mvn.w	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e00b      	b.n	8000e54 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <BSP_LED_Toggle+0x4c>)
 8000e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <BSP_LED_Toggle+0x50>)
 8000e48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4610      	mov	r0, r2
 8000e50:	f000 fdbf 	bl	80019d2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8000e54:	68fb      	ldr	r3, [r7, #12]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2400000c 	.word	0x2400000c
 8000e64:	08004f44 	.word	0x08004f44

08000e68 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e78:	4b2e      	ldr	r3, [pc, #184]	@ (8000f34 <BSP_PB_Init+0xcc>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f34 <BSP_PB_Init+0xcc>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e88:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <BSP_PB_Init+0xcc>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000e96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e9a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a21      	ldr	r2, [pc, #132]	@ (8000f38 <BSP_PB_Init+0xd0>)
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fbbf 	bl	8001640 <HAL_GPIO_Init>
 8000ec2:	e031      	b.n	8000f28 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000ec4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ec8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f38 <BSP_PB_Init+0xd0>)
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fbb1 	bl	8001640 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4a16      	ldr	r2, [pc, #88]	@ (8000f3c <BSP_PB_Init+0xd4>)
 8000ee4:	441a      	add	r2, r3
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4915      	ldr	r1, [pc, #84]	@ (8000f40 <BSP_PB_Init+0xd8>)
 8000eea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	f000 fb60 	bl	80015b6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4a10      	ldr	r2, [pc, #64]	@ (8000f3c <BSP_PB_Init+0xd4>)
 8000efc:	1898      	adds	r0, r3, r2
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4a10      	ldr	r2, [pc, #64]	@ (8000f44 <BSP_PB_Init+0xdc>)
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	461a      	mov	r2, r3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f000 fb35 	bl	8001578 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f0e:	2028      	movs	r0, #40	@ 0x28
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <BSP_PB_Init+0xe0>)
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f000 fa7f 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f20:	2328      	movs	r3, #40	@ 0x28
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fa95 	bl	8001452 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	58024400 	.word	0x58024400
 8000f38:	24000018 	.word	0x24000018
 8000f3c:	240000bc 	.word	0x240000bc
 8000f40:	08004f4c 	.word	0x08004f4c
 8000f44:	2400001c 	.word	0x2400001c
 8000f48:	24000020 	.word	0x24000020

08000f4c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <BSP_PB_IRQHandler+0x20>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fb3e 	bl	80015e0 <HAL_EXTI_IRQHandler>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	240000bc 	.word	0x240000bc

08000f70 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f86:	f06f 0301 	mvn.w	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e018      	b.n	8000fc0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2294      	movs	r2, #148	@ 0x94
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <BSP_COM_Init+0x5c>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f86e 	bl	800107c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2294      	movs	r2, #148	@ 0x94
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <BSP_COM_Init+0x5c>)
 8000faa:	4413      	add	r3, r2
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f80e 	bl	8000fd0 <MX_USART3_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000fba:	f06f 0303 	mvn.w	r3, #3
 8000fbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	240000c4 	.word	0x240000c4

08000fd0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <MX_USART3_Init+0x60>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	220c      	movs	r2, #12
 8000fee:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	895b      	ldrh	r3, [r3, #10]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	891b      	ldrh	r3, [r3, #8]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	899b      	ldrh	r3, [r3, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800101c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f001 ffd0 	bl	8002fc4 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000008 	.word	0x24000008

08001034 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <__io_putchar+0x30>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	2394      	movs	r3, #148	@ 0x94
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <__io_putchar+0x34>)
 800104a:	1898      	adds	r0, r3, r2
 800104c:	1d39      	adds	r1, r7, #4
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	2201      	movs	r2, #1
 8001054:	f002 f810 	bl	8003078 <HAL_UART_Transmit>
  return ch;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000158 	.word	0x24000158
 8001068:	240000c4 	.word	0x240000c4

0800106c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc3d 	bl	80008f0 <BSP_PB_Callback>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001084:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <COM1_MspInit+0xa8>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	4a26      	ldr	r2, [pc, #152]	@ (8001124 <COM1_MspInit+0xa8>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001094:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <COM1_MspInit+0xa8>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010a2:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <COM1_MspInit+0xa8>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <COM1_MspInit+0xa8>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <COM1_MspInit+0xa8>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <COM1_MspInit+0xa8>)
 80010c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <COM1_MspInit+0xa8>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <COM1_MspInit+0xa8>)
 80010d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80010de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80010f0:	2307      	movs	r3, #7
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	@ (8001128 <COM1_MspInit+0xac>)
 80010fc:	f000 faa0 	bl	8001640 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001104:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800110a:	2307      	movs	r3, #7
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <COM1_MspInit+0xac>)
 8001116:	f000 fa93 	bl	8001640 <HAL_GPIO_Init>
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	@ 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	58024400 	.word	0x58024400
 8001128:	58020c00 	.word	0x58020c00

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f968 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001138:	f001 fab0 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	4913      	ldr	r1, [pc, #76]	@ (8001198 <HAL_Init+0x6c>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <HAL_Init+0x6c>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <HAL_Init+0x70>)
 800116e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001170:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <HAL_Init+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f814 	bl	80011a4 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e002      	b.n	800118c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fbcd 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	08004f34 	.word	0x08004f34
 800119c:	24000004 	.word	0x24000004
 80011a0:	24000000 	.word	0x24000000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e021      	b.n	80011fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <HAL_InitTick+0x64>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_InitTick+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f94d 	bl	800146e <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f917 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	@ (800120c <HAL_InitTick+0x68>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24000028 	.word	0x24000028
 8001208:	24000000 	.word	0x24000000
 800120c:	24000024 	.word	0x24000024

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24000028 	.word	0x24000028
 8001234:	2400015c 	.word	0x2400015c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400015c 	.word	0x2400015c

08001250 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_GetREVID+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0c1b      	lsrs	r3, r3, #16
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	5c001000 	.word	0x5c001000

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x40>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	4313      	orrs	r3, r2
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	05fa0000 	.word	0x05fa0000

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	@ (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	@ (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	@ 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff40 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff33 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa4 	bl	80013c4 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800148c:	f3bf 8f5f 	dmb	sy
}
 8001490:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <HAL_MPU_Disable+0x28>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001496:	4a06      	ldr	r2, [pc, #24]	@ (80014b0 <HAL_MPU_Disable+0x28>)
 8001498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_MPU_Disable+0x2c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	e000ed90 	.word	0xe000ed90

080014b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014c0:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <HAL_MPU_Enable+0x38>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_MPU_Enable+0x3c>)
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <HAL_MPU_Enable+0x3c>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014d6:	f3bf 8f4f 	dsb	sy
}
 80014da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014dc:	f3bf 8f6f 	isb	sy
}
 80014e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed90 	.word	0xe000ed90
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	785a      	ldrb	r2, [r3, #1]
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_MPU_ConfigRegion+0x7c>)
 8001506:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001508:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <HAL_MPU_ConfigRegion+0x7c>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <HAL_MPU_ConfigRegion+0x7c>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001514:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <HAL_MPU_ConfigRegion+0x7c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7b1b      	ldrb	r3, [r3, #12]
 8001520:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7adb      	ldrb	r3, [r3, #11]
 8001526:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7a9b      	ldrb	r3, [r3, #10]
 800152e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001530:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7b5b      	ldrb	r3, [r3, #13]
 8001536:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7b9b      	ldrb	r3, [r3, #14]
 800153e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7bdb      	ldrb	r3, [r3, #15]
 8001546:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001548:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7a5b      	ldrb	r3, [r3, #9]
 800154e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001550:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7a1b      	ldrb	r3, [r3, #8]
 8001556:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001558:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001560:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001562:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001564:	6113      	str	r3, [r2, #16]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed90 	.word	0xe000ed90

08001578 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	460b      	mov	r3, r1
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e00a      	b.n	80015aa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d103      	bne.n	80015a2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	605a      	str	r2, [r3, #4]
      break;
 80015a0:	e002      	b.n	80015a8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
      break;
 80015a6:	bf00      	nop
  }

  return status;
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e003      	b.n	80015d2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80015d0:	2300      	movs	r3, #0
  }
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	2201      	movs	r2, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	011a      	lsls	r2, r3, #4
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_EXTI_IRQHandler+0x5c>)
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4798      	blx	r3
    }
  }
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	58000088 	.word	0x58000088

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800164e:	4b89      	ldr	r3, [pc, #548]	@ (8001874 <HAL_GPIO_Init+0x234>)
 8001650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001652:	e194      	b.n	800197e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8186 	beq.w	8001978 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d005      	beq.n	8001684 <HAL_GPIO_Init+0x44>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d130      	bne.n	80016e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ba:	2201      	movs	r2, #1
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 0201 	and.w	r2, r3, #1
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d017      	beq.n	8001722 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d123      	bne.n	8001776 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	08da      	lsrs	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3208      	adds	r2, #8
 8001736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	69b9      	ldr	r1, [r7, #24]
 8001772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0203 	and.w	r2, r3, #3
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80e0 	beq.w	8001978 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <HAL_GPIO_Init+0x238>)
 80017ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017be:	4a2e      	ldr	r2, [pc, #184]	@ (8001878 <HAL_GPIO_Init+0x238>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <HAL_GPIO_Init+0x238>)
 80017ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	4a29      	ldr	r2, [pc, #164]	@ (800187c <HAL_GPIO_Init+0x23c>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a20      	ldr	r2, [pc, #128]	@ (8001880 <HAL_GPIO_Init+0x240>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d052      	beq.n	80018a8 <HAL_GPIO_Init+0x268>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1f      	ldr	r2, [pc, #124]	@ (8001884 <HAL_GPIO_Init+0x244>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d031      	beq.n	800186e <HAL_GPIO_Init+0x22e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1e      	ldr	r2, [pc, #120]	@ (8001888 <HAL_GPIO_Init+0x248>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d02b      	beq.n	800186a <HAL_GPIO_Init+0x22a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <HAL_GPIO_Init+0x24c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d025      	beq.n	8001866 <HAL_GPIO_Init+0x226>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <HAL_GPIO_Init+0x250>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01f      	beq.n	8001862 <HAL_GPIO_Init+0x222>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_GPIO_Init+0x254>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0x21e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <HAL_GPIO_Init+0x258>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0x21a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a19      	ldr	r2, [pc, #100]	@ (800189c <HAL_GPIO_Init+0x25c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x216>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a18      	ldr	r2, [pc, #96]	@ (80018a0 <HAL_GPIO_Init+0x260>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x212>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <HAL_GPIO_Init+0x264>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x20e>
 800184a:	2309      	movs	r3, #9
 800184c:	e02d      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 800184e:	230a      	movs	r3, #10
 8001850:	e02b      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 8001852:	2308      	movs	r3, #8
 8001854:	e029      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 8001856:	2307      	movs	r3, #7
 8001858:	e027      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 800185a:	2306      	movs	r3, #6
 800185c:	e025      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 800185e:	2305      	movs	r3, #5
 8001860:	e023      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 8001862:	2304      	movs	r3, #4
 8001864:	e021      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 8001866:	2303      	movs	r3, #3
 8001868:	e01f      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 800186a:	2302      	movs	r3, #2
 800186c:	e01d      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 800186e:	2301      	movs	r3, #1
 8001870:	e01b      	b.n	80018aa <HAL_GPIO_Init+0x26a>
 8001872:	bf00      	nop
 8001874:	58000080 	.word	0x58000080
 8001878:	58024400 	.word	0x58024400
 800187c:	58000400 	.word	0x58000400
 8001880:	58020000 	.word	0x58020000
 8001884:	58020400 	.word	0x58020400
 8001888:	58020800 	.word	0x58020800
 800188c:	58020c00 	.word	0x58020c00
 8001890:	58021000 	.word	0x58021000
 8001894:	58021400 	.word	0x58021400
 8001898:	58021800 	.word	0x58021800
 800189c:	58021c00 	.word	0x58021c00
 80018a0:	58022000 	.word	0x58022000
 80018a4:	58022400 	.word	0x58022400
 80018a8:	2300      	movs	r3, #0
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	f002 0203 	and.w	r2, r2, #3
 80018b0:	0092      	lsls	r2, r2, #2
 80018b2:	4093      	lsls	r3, r2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ba:	4938      	ldr	r1, [pc, #224]	@ (800199c <HAL_GPIO_Init+0x35c>)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800191c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	3301      	adds	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	f47f ae63 	bne.w	8001654 <HAL_GPIO_Init+0x14>
  }
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	3724      	adds	r7, #36	@ 0x24
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	58000400 	.word	0x58000400

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e4:	887a      	ldrh	r2, [r7, #2]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	041a      	lsls	r2, r3, #16
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	400b      	ands	r3, r1
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_PWREx_ConfigSupply+0x70>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d00a      	beq.n	8001a32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a1c:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_PWREx_ConfigSupply+0x70>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e01f      	b.n	8001a6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e01d      	b.n	8001a6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <HAL_PWREx_ConfigSupply+0x70>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f023 0207 	bic.w	r2, r3, #7
 8001a3a:	490f      	ldr	r1, [pc, #60]	@ (8001a78 <HAL_PWREx_ConfigSupply+0x70>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a42:	f7ff fbf9 	bl	8001238 <HAL_GetTick>
 8001a46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a48:	e009      	b.n	8001a5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a4a:	f7ff fbf5 	bl	8001238 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a58:	d901      	bls.n	8001a5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e007      	b.n	8001a6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_PWREx_ConfigSupply+0x70>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	58024800 	.word	0x58024800

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	@ 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f000 bc48 	b.w	8002320 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8088 	beq.w	8001bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9e:	4b99      	ldr	r3, [pc, #612]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aa8:	4b96      	ldr	r3, [pc, #600]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab0:	2b10      	cmp	r3, #16
 8001ab2:	d007      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x48>
 8001ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab6:	2b18      	cmp	r3, #24
 8001ab8:	d111      	bne.n	8001ade <HAL_RCC_OscConfig+0x62>
 8001aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d06d      	beq.n	8001bac <HAL_RCC_OscConfig+0x130>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d169      	bne.n	8001bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f000 bc21 	b.w	8002320 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x7a>
 8001ae8:	4b86      	ldr	r3, [pc, #536]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a85      	ldr	r2, [pc, #532]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e02e      	b.n	8001b54 <HAL_RCC_OscConfig+0xd8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x9c>
 8001afe:	4b81      	ldr	r3, [pc, #516]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a80      	ldr	r2, [pc, #512]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01d      	b.n	8001b54 <HAL_RCC_OscConfig+0xd8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0xc0>
 8001b22:	4b78      	ldr	r3, [pc, #480]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a77      	ldr	r2, [pc, #476]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b75      	ldr	r3, [pc, #468]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a74      	ldr	r2, [pc, #464]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xd8>
 8001b3c:	4b71      	ldr	r3, [pc, #452]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a70      	ldr	r2, [pc, #448]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b6e      	ldr	r3, [pc, #440]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb6c 	bl	8001238 <HAL_GetTick>
 8001b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fb68 	bl	8001238 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	@ 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e3d4      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b76:	4b63      	ldr	r3, [pc, #396]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe8>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fb58 	bl	8001238 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fb54 	bl	8001238 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	@ 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e3c0      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b9e:	4b59      	ldr	r3, [pc, #356]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x110>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80ca 	beq.w	8001d50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bbc:	4b51      	ldr	r3, [pc, #324]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_RCC_OscConfig+0x166>
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2b18      	cmp	r3, #24
 8001bd6:	d156      	bne.n	8001c86 <HAL_RCC_OscConfig+0x20a>
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d151      	bne.n	8001c86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be2:	4b48      	ldr	r3, [pc, #288]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x17e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e392      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bfa:	4b42      	ldr	r3, [pc, #264]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0219 	bic.w	r2, r3, #25
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	493f      	ldr	r1, [pc, #252]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb14 	bl	8001238 <HAL_GetTick>
 8001c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff fb10 	bl	8001238 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e37c      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c26:	4b37      	ldr	r3, [pc, #220]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	f7ff fb0d 	bl	8001250 <HAL_GetREVID>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d817      	bhi.n	8001c70 <HAL_RCC_OscConfig+0x1f4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b40      	cmp	r3, #64	@ 0x40
 8001c46:	d108      	bne.n	8001c5a <HAL_RCC_OscConfig+0x1de>
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c50:	4a2c      	ldr	r2, [pc, #176]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c58:	e07a      	b.n	8001d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	031b      	lsls	r3, r3, #12
 8001c68:	4926      	ldr	r1, [pc, #152]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c6e:	e06f      	b.n	8001d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	4921      	ldr	r1, [pc, #132]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	e064      	b.n	8001d50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d047      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0219 	bic.w	r2, r3, #25
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	491a      	ldr	r1, [pc, #104]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff faca 	bl	8001238 <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fac6 	bl	8001238 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e332      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cba:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	f7ff fac3 	bl	8001250 <HAL_GetREVID>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d819      	bhi.n	8001d08 <HAL_RCC_OscConfig+0x28c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b40      	cmp	r3, #64	@ 0x40
 8001cda:	d108      	bne.n	8001cee <HAL_RCC_OscConfig+0x272>
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ce4:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cea:	6053      	str	r3, [r2, #4]
 8001cec:	e030      	b.n	8001d50 <HAL_RCC_OscConfig+0x2d4>
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	031b      	lsls	r3, r3, #12
 8001cfc:	4901      	ldr	r1, [pc, #4]	@ (8001d04 <HAL_RCC_OscConfig+0x288>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
 8001d02:	e025      	b.n	8001d50 <HAL_RCC_OscConfig+0x2d4>
 8001d04:	58024400 	.word	0x58024400
 8001d08:	4b9a      	ldr	r3, [pc, #616]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	4997      	ldr	r1, [pc, #604]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
 8001d1c:	e018      	b.n	8001d50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	4b95      	ldr	r3, [pc, #596]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a94      	ldr	r2, [pc, #592]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fa85 	bl	8001238 <HAL_GetTick>
 8001d2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d32:	f7ff fa81 	bl	8001238 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e2ed      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d44:	4b8b      	ldr	r3, [pc, #556]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a9 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5e:	4b85      	ldr	r3, [pc, #532]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d68:	4b82      	ldr	r3, [pc, #520]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d007      	beq.n	8001d84 <HAL_RCC_OscConfig+0x308>
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b18      	cmp	r3, #24
 8001d78:	d13a      	bne.n	8001df0 <HAL_RCC_OscConfig+0x374>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d135      	bne.n	8001df0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d84:	4b7b      	ldr	r3, [pc, #492]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x320>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b80      	cmp	r3, #128	@ 0x80
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e2c1      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d9c:	f7ff fa58 	bl	8001250 <HAL_GetREVID>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d817      	bhi.n	8001dda <HAL_RCC_OscConfig+0x35e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x348>
 8001db2:	4b70      	ldr	r3, [pc, #448]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001dba:	4a6e      	ldr	r2, [pc, #440]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dc2:	e075      	b.n	8001eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	069b      	lsls	r3, r3, #26
 8001dd2:	4968      	ldr	r1, [pc, #416]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dd8:	e06a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dda:	4b66      	ldr	r3, [pc, #408]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	061b      	lsls	r3, r3, #24
 8001de8:	4962      	ldr	r1, [pc, #392]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dee:	e05f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d042      	beq.n	8001e7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001df8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fa18 	bl	8001238 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fa14 	bl	8001238 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e280      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e1e:	4b55      	ldr	r3, [pc, #340]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e2a:	f7ff fa11 	bl	8001250 <HAL_GetREVID>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d817      	bhi.n	8001e68 <HAL_RCC_OscConfig+0x3ec>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d108      	bne.n	8001e52 <HAL_RCC_OscConfig+0x3d6>
 8001e40:	4b4c      	ldr	r3, [pc, #304]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e48:	4a4a      	ldr	r2, [pc, #296]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e4e:	6053      	str	r3, [r2, #4]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x434>
 8001e52:	4b48      	ldr	r3, [pc, #288]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	069b      	lsls	r3, r3, #26
 8001e60:	4944      	ldr	r1, [pc, #272]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
 8001e66:	e023      	b.n	8001eb0 <HAL_RCC_OscConfig+0x434>
 8001e68:	4b42      	ldr	r3, [pc, #264]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	493f      	ldr	r1, [pc, #252]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
 8001e7c:	e018      	b.n	8001eb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a3c      	ldr	r2, [pc, #240]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f9d5 	bl	8001238 <HAL_GetTick>
 8001e8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e92:	f7ff f9d1 	bl	8001238 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e23d      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ea4:	4b33      	ldr	r3, [pc, #204]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d036      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d019      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f9b2 	bl	8001238 <HAL_GetTick>
 8001ed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff f9ae 	bl	8001238 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e21a      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eea:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x45c>
 8001ef6:	e018      	b.n	8001f2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff f998 	bl	8001238 <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff f994 	bl	8001238 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e200      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d039      	beq.n	8001faa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a0c      	ldr	r2, [pc, #48]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f975 	bl	8001238 <HAL_GetTick>
 8001f4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f52:	f7ff f971 	bl	8001238 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e1dd      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4d6>
 8001f70:	e01b      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
 8001f72:	bf00      	nop
 8001f74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f78:	4b9b      	ldr	r3, [pc, #620]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a9a      	ldr	r2, [pc, #616]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f84:	f7ff f958 	bl	8001238 <HAL_GetTick>
 8001f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f8c:	f7ff f954 	bl	8001238 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1c0      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f9e:	4b92      	ldr	r3, [pc, #584]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8081 	beq.w	80020ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80021ec <HAL_RCC_OscConfig+0x770>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8b      	ldr	r2, [pc, #556]	@ (80021ec <HAL_RCC_OscConfig+0x770>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff f938 	bl	8001238 <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fcc:	f7ff f934 	bl	8001238 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	@ 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1a0      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fde:	4b83      	ldr	r3, [pc, #524]	@ (80021ec <HAL_RCC_OscConfig+0x770>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x584>
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ffe:	e02d      	b.n	800205c <HAL_RCC_OscConfig+0x5e0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x5a6>
 8002008:	4b77      	ldr	r3, [pc, #476]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200c:	4a76      	ldr	r2, [pc, #472]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	6713      	str	r3, [r2, #112]	@ 0x70
 8002014:	4b74      	ldr	r3, [pc, #464]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	4a73      	ldr	r2, [pc, #460]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800201a:	f023 0304 	bic.w	r3, r3, #4
 800201e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002020:	e01c      	b.n	800205c <HAL_RCC_OscConfig+0x5e0>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b05      	cmp	r3, #5
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c8>
 800202a:	4b6f      	ldr	r3, [pc, #444]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202e:	4a6e      	ldr	r2, [pc, #440]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	6713      	str	r3, [r2, #112]	@ 0x70
 8002036:	4b6c      	ldr	r3, [pc, #432]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	4a6b      	ldr	r2, [pc, #428]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6713      	str	r3, [r2, #112]	@ 0x70
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0x5e0>
 8002044:	4b68      	ldr	r3, [pc, #416]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	4a67      	ldr	r2, [pc, #412]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002050:	4b65      	ldr	r3, [pc, #404]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4a64      	ldr	r2, [pc, #400]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002056:	f023 0304 	bic.w	r3, r3, #4
 800205a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d015      	beq.n	8002090 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff f8e8 	bl	8001238 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff f8e4 	bl	8001238 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e14e      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002082:	4b59      	ldr	r3, [pc, #356]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0ee      	beq.n	800206c <HAL_RCC_OscConfig+0x5f0>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f8d2 	bl	8001238 <HAL_GetTick>
 8002094:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7ff f8ce 	bl	8001238 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e138      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ae:	4b4e      	ldr	r3, [pc, #312]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ee      	bne.n	8002098 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 812d 	beq.w	800231e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020c4:	4b48      	ldr	r3, [pc, #288]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020cc:	2b18      	cmp	r3, #24
 80020ce:	f000 80bd 	beq.w	800224c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	f040 809e 	bne.w	8002218 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b42      	ldr	r3, [pc, #264]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a41      	ldr	r2, [pc, #260]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80020e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff f8a6 	bl	8001238 <HAL_GetTick>
 80020ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7ff f8a2 	bl	8001238 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e10e      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002102:	4b39      	ldr	r3, [pc, #228]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210e:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002110:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002112:	4b37      	ldr	r3, [pc, #220]	@ (80021f0 <HAL_RCC_OscConfig+0x774>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	430a      	orrs	r2, r1
 8002122:	4931      	ldr	r1, [pc, #196]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002124:	4313      	orrs	r3, r2
 8002126:	628b      	str	r3, [r1, #40]	@ 0x28
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	3b01      	subs	r3, #1
 800212e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002136:	3b01      	subs	r3, #1
 8002138:	025b      	lsls	r3, r3, #9
 800213a:	b29b      	uxth	r3, r3
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	3b01      	subs	r3, #1
 8002152:	061b      	lsls	r3, r3, #24
 8002154:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002158:	4923      	ldr	r1, [pc, #140]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800215e:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	4a21      	ldr	r2, [pc, #132]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800216c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <HAL_RCC_OscConfig+0x778>)
 8002170:	4013      	ands	r3, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002176:	00d2      	lsls	r2, r2, #3
 8002178:	491b      	ldr	r1, [pc, #108]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	f023 020c 	bic.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4917      	ldr	r1, [pc, #92]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800218c:	4313      	orrs	r3, r2
 800218e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002190:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	f023 0202 	bic.w	r2, r3, #2
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219c:	4912      	ldr	r1, [pc, #72]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021a2:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a6:	4a10      	ldr	r2, [pc, #64]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	4a07      	ldr	r2, [pc, #28]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff f82b 	bl	8001238 <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021e4:	e011      	b.n	800220a <HAL_RCC_OscConfig+0x78e>
 80021e6:	bf00      	nop
 80021e8:	58024400 	.word	0x58024400
 80021ec:	58024800 	.word	0x58024800
 80021f0:	fffffc0c 	.word	0xfffffc0c
 80021f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff f81e 	bl	8001238 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e08a      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x77c>
 8002216:	e082      	b.n	800231e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	4b43      	ldr	r3, [pc, #268]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a42      	ldr	r2, [pc, #264]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 800221e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff f808 	bl	8001238 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff f804 	bl	8001238 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e070      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800223e:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x7b0>
 800224a:	e068      	b.n	800231e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800224c:	4b36      	ldr	r3, [pc, #216]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002252:	4b35      	ldr	r3, [pc, #212]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	2b01      	cmp	r3, #1
 800225e:	d031      	beq.n	80022c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0203 	and.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d12a      	bne.n	80022c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d122      	bne.n	80022c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d11a      	bne.n	80022c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	0a5b      	lsrs	r3, r3, #9
 8002292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d111      	bne.n	80022c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	0e1b      	lsrs	r3, r3, #24
 80022b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e02b      	b.n	8002320 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80022c8:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 80022ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d01f      	beq.n	800231e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80022de:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	4a11      	ldr	r2, [pc, #68]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022ea:	f7fe ffa5 	bl	8001238 <HAL_GetTick>
 80022ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80022f0:	bf00      	nop
 80022f2:	f7fe ffa1 	bl	8001238 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d0f9      	beq.n	80022f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002302:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_RCC_OscConfig+0x8b0>)
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800230a:	00d2      	lsls	r2, r2, #3
 800230c:	4906      	ldr	r1, [pc, #24]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 800230e:	4313      	orrs	r3, r2
 8002310:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002312:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <HAL_RCC_OscConfig+0x8ac>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3730      	adds	r7, #48	@ 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	58024400 	.word	0x58024400
 800232c:	ffff0007 	.word	0xffff0007

08002330 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e19c      	b.n	800267e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b8a      	ldr	r3, [pc, #552]	@ (8002570 <HAL_RCC_ClockConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d910      	bls.n	8002374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b87      	ldr	r3, [pc, #540]	@ (8002570 <HAL_RCC_ClockConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 020f 	bic.w	r2, r3, #15
 800235a:	4985      	ldr	r1, [pc, #532]	@ (8002570 <HAL_RCC_ClockConfig+0x240>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b83      	ldr	r3, [pc, #524]	@ (8002570 <HAL_RCC_ClockConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e184      	b.n	800267e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	4b7b      	ldr	r3, [pc, #492]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800238c:	429a      	cmp	r2, r3
 800238e:	d908      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002390:	4b78      	ldr	r3, [pc, #480]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	4975      	ldr	r1, [pc, #468]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d010      	beq.n	80023d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	4b70      	ldr	r3, [pc, #448]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d908      	bls.n	80023d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023be:	4b6d      	ldr	r3, [pc, #436]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	496a      	ldr	r1, [pc, #424]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d010      	beq.n	80023fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	4b64      	ldr	r3, [pc, #400]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d908      	bls.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023ec:	4b61      	ldr	r3, [pc, #388]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	495e      	ldr	r1, [pc, #376]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	d010      	beq.n	800242c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	4b59      	ldr	r3, [pc, #356]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002416:	429a      	cmp	r2, r3
 8002418:	d908      	bls.n	800242c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800241a:	4b56      	ldr	r3, [pc, #344]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4953      	ldr	r1, [pc, #332]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002428:	4313      	orrs	r3, r2
 800242a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4b4d      	ldr	r3, [pc, #308]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	429a      	cmp	r2, r3
 8002446:	d908      	bls.n	800245a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b4a      	ldr	r3, [pc, #296]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f023 020f 	bic.w	r2, r3, #15
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4947      	ldr	r1, [pc, #284]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002456:	4313      	orrs	r3, r2
 8002458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d055      	beq.n	8002512 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002466:	4b43      	ldr	r3, [pc, #268]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	4940      	ldr	r1, [pc, #256]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002474:	4313      	orrs	r3, r2
 8002476:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d107      	bne.n	8002490 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002480:	4b3c      	ldr	r3, [pc, #240]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d121      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0f6      	b.n	800267e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002498:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d115      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0ea      	b.n	800267e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024b0:	4b30      	ldr	r3, [pc, #192]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0de      	b.n	800267e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0d6      	b.n	800267e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024d0:	4b28      	ldr	r3, [pc, #160]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f023 0207 	bic.w	r2, r3, #7
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4925      	ldr	r1, [pc, #148]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e2:	f7fe fea9 	bl	8001238 <HAL_GetTick>
 80024e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ea:	f7fe fea5 	bl	8001238 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0be      	b.n	800267e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002500:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	429a      	cmp	r2, r3
 8002510:	d1eb      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	4b14      	ldr	r3, [pc, #80]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	429a      	cmp	r2, r3
 800252c:	d208      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f023 020f 	bic.w	r2, r3, #15
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	490e      	ldr	r1, [pc, #56]	@ (8002574 <HAL_RCC_ClockConfig+0x244>)
 800253c:	4313      	orrs	r3, r2
 800253e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_RCC_ClockConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d214      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_RCC_ClockConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 020f 	bic.w	r2, r3, #15
 8002556:	4906      	ldr	r1, [pc, #24]	@ (8002570 <HAL_RCC_ClockConfig+0x240>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <HAL_RCC_ClockConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e086      	b.n	800267e <HAL_RCC_ClockConfig+0x34e>
 8002570:	52002000 	.word	0x52002000
 8002574:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	4b3f      	ldr	r3, [pc, #252]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002590:	429a      	cmp	r2, r3
 8002592:	d208      	bcs.n	80025a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002594:	4b3c      	ldr	r3, [pc, #240]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4939      	ldr	r1, [pc, #228]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d010      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	4b34      	ldr	r3, [pc, #208]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025be:	429a      	cmp	r2, r3
 80025c0:	d208      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025c2:	4b31      	ldr	r3, [pc, #196]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	492e      	ldr	r1, [pc, #184]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d208      	bcs.n	8002602 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025f0:	4b25      	ldr	r3, [pc, #148]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4922      	ldr	r1, [pc, #136]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800261a:	429a      	cmp	r2, r3
 800261c:	d208      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4917      	ldr	r1, [pc, #92]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 800262c:	4313      	orrs	r3, r2
 800262e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002630:	f000 f834 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	4912      	ldr	r1, [pc, #72]	@ (800268c <HAL_RCC_ClockConfig+0x35c>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <HAL_RCC_ClockConfig+0x358>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <HAL_RCC_ClockConfig+0x35c>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
 8002664:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <HAL_RCC_ClockConfig+0x360>)
 8002666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002668:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <HAL_RCC_ClockConfig+0x364>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_RCC_ClockConfig+0x368>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fd96 	bl	80011a4 <HAL_InitTick>
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	58024400 	.word	0x58024400
 800268c:	08004f34 	.word	0x08004f34
 8002690:	24000004 	.word	0x24000004
 8002694:	24000000 	.word	0x24000000
 8002698:	24000024 	.word	0x24000024

0800269c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	@ 0x24
 80026a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a2:	4bb3      	ldr	r3, [pc, #716]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026aa:	2b18      	cmp	r3, #24
 80026ac:	f200 8155 	bhi.w	800295a <HAL_RCC_GetSysClockFreq+0x2be>
 80026b0:	a201      	add	r2, pc, #4	@ (adr r2, 80026b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	0800271d 	.word	0x0800271d
 80026bc:	0800295b 	.word	0x0800295b
 80026c0:	0800295b 	.word	0x0800295b
 80026c4:	0800295b 	.word	0x0800295b
 80026c8:	0800295b 	.word	0x0800295b
 80026cc:	0800295b 	.word	0x0800295b
 80026d0:	0800295b 	.word	0x0800295b
 80026d4:	0800295b 	.word	0x0800295b
 80026d8:	08002743 	.word	0x08002743
 80026dc:	0800295b 	.word	0x0800295b
 80026e0:	0800295b 	.word	0x0800295b
 80026e4:	0800295b 	.word	0x0800295b
 80026e8:	0800295b 	.word	0x0800295b
 80026ec:	0800295b 	.word	0x0800295b
 80026f0:	0800295b 	.word	0x0800295b
 80026f4:	0800295b 	.word	0x0800295b
 80026f8:	08002749 	.word	0x08002749
 80026fc:	0800295b 	.word	0x0800295b
 8002700:	0800295b 	.word	0x0800295b
 8002704:	0800295b 	.word	0x0800295b
 8002708:	0800295b 	.word	0x0800295b
 800270c:	0800295b 	.word	0x0800295b
 8002710:	0800295b 	.word	0x0800295b
 8002714:	0800295b 	.word	0x0800295b
 8002718:	0800274f 	.word	0x0800274f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800271c:	4b94      	ldr	r3, [pc, #592]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002728:	4b91      	ldr	r3, [pc, #580]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	4a90      	ldr	r2, [pc, #576]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800273a:	e111      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800273c:	4b8d      	ldr	r3, [pc, #564]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800273e:	61bb      	str	r3, [r7, #24]
      break;
 8002740:	e10e      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002742:	4b8d      	ldr	r3, [pc, #564]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002744:	61bb      	str	r3, [r7, #24]
      break;
 8002746:	e10b      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002748:	4b8c      	ldr	r3, [pc, #560]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800274a:	61bb      	str	r3, [r7, #24]
      break;
 800274c:	e108      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800274e:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002758:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002762:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002764:	4b82      	ldr	r3, [pc, #520]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800276e:	4b80      	ldr	r3, [pc, #512]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002772:	08db      	lsrs	r3, r3, #3
 8002774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80e1 	beq.w	8002954 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b02      	cmp	r3, #2
 8002796:	f000 8083 	beq.w	80028a0 <HAL_RCC_GetSysClockFreq+0x204>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b02      	cmp	r3, #2
 800279e:	f200 80a1 	bhi.w	80028e4 <HAL_RCC_GetSysClockFreq+0x248>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x114>
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d056      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x1c0>
 80027ae:	e099      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02d      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	4a6b      	ldr	r2, [pc, #428]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e6:	4b62      	ldr	r3, [pc, #392]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800280a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002816:	e087      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002984 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800282a:	4b51      	ldr	r3, [pc, #324]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800283a:	ed97 6a02 	vldr	s12, [r7, #8]
 800283e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800284a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800284e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800285a:	e065      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002988 <HAL_RCC_GetSysClockFreq+0x2ec>
 800286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002882:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800289e:	e043      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800298c <HAL_RCC_GetSysClockFreq+0x2f0>
 80028ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028e2:	e021      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002988 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002906:	ed97 6a02 	vldr	s12, [r7, #8]
 800290a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002980 <HAL_RCC_GetSysClockFreq+0x2e4>
 800290e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800291a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002926:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292c:	0a5b      	lsrs	r3, r3, #9
 800292e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002932:	3301      	adds	r3, #1
 8002934:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002940:	edd7 6a07 	vldr	s13, [r7, #28]
 8002944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002952:	e005      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]
      break;
 8002958:	e002      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800295a:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800295c:	61bb      	str	r3, [r7, #24]
      break;
 800295e:	bf00      	nop
  }

  return sysclockfreq;
 8002960:	69bb      	ldr	r3, [r7, #24]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	@ 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	58024400 	.word	0x58024400
 8002974:	03d09000 	.word	0x03d09000
 8002978:	003d0900 	.word	0x003d0900
 800297c:	017d7840 	.word	0x017d7840
 8002980:	46000000 	.word	0x46000000
 8002984:	4c742400 	.word	0x4c742400
 8002988:	4a742400 	.word	0x4a742400
 800298c:	4bbebc20 	.word	0x4bbebc20

08002990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002996:	f7ff fe81 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800299a:	4602      	mov	r2, r0
 800299c:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	490f      	ldr	r1, [pc, #60]	@ (80029e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80029a8:	5ccb      	ldrb	r3, [r1, r3]
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029b4:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	4a09      	ldr	r2, [pc, #36]	@ (80029e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	4a07      	ldr	r2, [pc, #28]	@ (80029e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80029cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029ce:	4a07      	ldr	r2, [pc, #28]	@ (80029ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	58024400 	.word	0x58024400
 80029e4:	08004f34 	.word	0x08004f34
 80029e8:	24000004 	.word	0x24000004
 80029ec:	24000000 	.word	0x24000000

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80029f4:	f7ff ffcc 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4904      	ldr	r1, [pc, #16]	@ (8002a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	58024400 	.word	0x58024400
 8002a18:	08004f34 	.word	0x08004f34

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a20:	f7ff ffb6 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4904      	ldr	r1, [pc, #16]	@ (8002a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	58024400 	.word	0x58024400
 8002a44:	08004f34 	.word	0x08004f34

08002a48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002a4c:	f7ff ffa0 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4904      	ldr	r1, [pc, #16]	@ (8002a70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	58024400 	.word	0x58024400
 8002a70:	08004f34 	.word	0x08004f34

08002a74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a7c:	4ba1      	ldr	r3, [pc, #644]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002a86:	4b9f      	ldr	r3, [pc, #636]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	0b1b      	lsrs	r3, r3, #12
 8002a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002a92:	4b9c      	ldr	r3, [pc, #624]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002a9e:	4b99      	ldr	r3, [pc, #612]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa2:	08db      	lsrs	r3, r3, #3
 8002aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8111 	beq.w	8002ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f000 8083 	beq.w	8002bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	f200 80a1 	bhi.w	8002c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d056      	beq.n	8002b8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002ade:	e099      	b.n	8002c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ae0:	4b88      	ldr	r3, [pc, #544]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02d      	beq.n	8002b48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002aec:	4b85      	ldr	r3, [pc, #532]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	4a84      	ldr	r2, [pc, #528]	@ (8002d08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b16:	4b7b      	ldr	r3, [pc, #492]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002b46:	e087      	b.n	8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002d10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b8a:	e065      	b.n	8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b9e:	4b59      	ldr	r3, [pc, #356]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8002bb2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bce:	e043      	b.n	8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002be2:	4b48      	ldr	r3, [pc, #288]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002bf6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c12:	e021      	b.n	8002c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c26:	4b37      	ldr	r3, [pc, #220]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002c58:	4b2a      	ldr	r3, [pc, #168]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	0a5b      	lsrs	r3, r3, #9
 8002c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c7e:	ee17 2a90 	vmov	r2, s15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002c86:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cac:	ee17 2a90 	vmov	r2, s15
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	0e1b      	lsrs	r3, r3, #24
 8002cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cda:	ee17 2a90 	vmov	r2, s15
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400
 8002d08:	03d09000 	.word	0x03d09000
 8002d0c:	46000000 	.word	0x46000000
 8002d10:	4c742400 	.word	0x4c742400
 8002d14:	4a742400 	.word	0x4a742400
 8002d18:	4bbebc20 	.word	0x4bbebc20

08002d1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d24:	4ba1      	ldr	r3, [pc, #644]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002d2e:	4b9f      	ldr	r3, [pc, #636]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	0d1b      	lsrs	r3, r3, #20
 8002d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002d3a:	4b9c      	ldr	r3, [pc, #624]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002d46:	4b99      	ldr	r3, [pc, #612]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	08db      	lsrs	r3, r3, #3
 8002d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8111 	beq.w	8002f8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	f000 8083 	beq.w	8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f200 80a1 	bhi.w	8002ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d056      	beq.n	8002e34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002d86:	e099      	b.n	8002ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d88:	4b88      	ldr	r3, [pc, #544]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02d      	beq.n	8002df0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d94:	4b85      	ldr	r3, [pc, #532]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	08db      	lsrs	r3, r3, #3
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	4a84      	ldr	r2, [pc, #528]	@ (8002fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
 8002da4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002dee:	e087      	b.n	8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e02:	4b6a      	ldr	r3, [pc, #424]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e32:	e065      	b.n	8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e46:	4b59      	ldr	r3, [pc, #356]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e76:	e043      	b.n	8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8a:	4b48      	ldr	r3, [pc, #288]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e92:	ee07 3a90 	vmov	s15, r3
 8002e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eba:	e021      	b.n	8002f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ece:	4b37      	ldr	r3, [pc, #220]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ee2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002efe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002f00:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	0a5b      	lsrs	r3, r3, #9
 8002f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f26:	ee17 2a90 	vmov	r2, s15
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f54:	ee17 2a90 	vmov	r2, s15
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002f5c:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	0e1b      	lsrs	r3, r3, #24
 8002f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f82:	ee17 2a90 	vmov	r2, s15
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002f8a:	e008      	b.n	8002f9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	3724      	adds	r7, #36	@ 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	03d09000 	.word	0x03d09000
 8002fb4:	46000000 	.word	0x46000000
 8002fb8:	4c742400 	.word	0x4c742400
 8002fbc:	4a742400 	.word	0x4a742400
 8002fc0:	4bbebc20 	.word	0x4bbebc20

08002fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e042      	b.n	800305c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f83b 	bl	8003064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2224      	movs	r2, #36	@ 0x24
 8002ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fe28 	bl	8003c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8bd 	bl	8003194 <UART_SetConfig>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e01b      	b.n	800305c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fea7 	bl	8003da8 <UART_CheckIdleState>
 800305a:	4603      	mov	r3, r0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308e:	2b20      	cmp	r3, #32
 8003090:	d17b      	bne.n	800318a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_UART_Transmit+0x26>
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e074      	b.n	800318c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	@ 0x21
 80030ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b2:	f7fe f8c1 	bl	8001238 <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d0:	d108      	bne.n	80030e4 <HAL_UART_Transmit+0x6c>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e003      	b.n	80030ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030ec:	e030      	b.n	8003150 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2180      	movs	r1, #128	@ 0x80
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 feff 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e03d      	b.n	800318c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3302      	adds	r3, #2
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e007      	b.n	800313e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	3301      	adds	r3, #1
 800313c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1c8      	bne.n	80030ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2200      	movs	r2, #0
 8003164:	2140      	movs	r1, #64	@ 0x40
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fec8 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e006      	b.n	800318c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800318a:	2302      	movs	r3, #2
  }
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b092      	sub	sp, #72	@ 0x48
 800319a:	af00      	add	r7, sp, #0
 800319c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4bbe      	ldr	r3, [pc, #760]	@ (80034bc <UART_SetConfig+0x328>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4ab3      	ldr	r2, [pc, #716]	@ (80034c0 <UART_SetConfig+0x32c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031fc:	4313      	orrs	r3, r2
 80031fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	4baf      	ldr	r3, [pc, #700]	@ (80034c4 <UART_SetConfig+0x330>)
 8003208:	4013      	ands	r3, r2
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003210:	430b      	orrs	r3, r1
 8003212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321a:	f023 010f 	bic.w	r1, r3, #15
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4aa6      	ldr	r2, [pc, #664]	@ (80034c8 <UART_SetConfig+0x334>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d177      	bne.n	8003324 <UART_SetConfig+0x190>
 8003234:	4ba5      	ldr	r3, [pc, #660]	@ (80034cc <UART_SetConfig+0x338>)
 8003236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800323c:	2b28      	cmp	r3, #40	@ 0x28
 800323e:	d86d      	bhi.n	800331c <UART_SetConfig+0x188>
 8003240:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <UART_SetConfig+0xb4>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	080032ed 	.word	0x080032ed
 800324c:	0800331d 	.word	0x0800331d
 8003250:	0800331d 	.word	0x0800331d
 8003254:	0800331d 	.word	0x0800331d
 8003258:	0800331d 	.word	0x0800331d
 800325c:	0800331d 	.word	0x0800331d
 8003260:	0800331d 	.word	0x0800331d
 8003264:	0800331d 	.word	0x0800331d
 8003268:	080032f5 	.word	0x080032f5
 800326c:	0800331d 	.word	0x0800331d
 8003270:	0800331d 	.word	0x0800331d
 8003274:	0800331d 	.word	0x0800331d
 8003278:	0800331d 	.word	0x0800331d
 800327c:	0800331d 	.word	0x0800331d
 8003280:	0800331d 	.word	0x0800331d
 8003284:	0800331d 	.word	0x0800331d
 8003288:	080032fd 	.word	0x080032fd
 800328c:	0800331d 	.word	0x0800331d
 8003290:	0800331d 	.word	0x0800331d
 8003294:	0800331d 	.word	0x0800331d
 8003298:	0800331d 	.word	0x0800331d
 800329c:	0800331d 	.word	0x0800331d
 80032a0:	0800331d 	.word	0x0800331d
 80032a4:	0800331d 	.word	0x0800331d
 80032a8:	08003305 	.word	0x08003305
 80032ac:	0800331d 	.word	0x0800331d
 80032b0:	0800331d 	.word	0x0800331d
 80032b4:	0800331d 	.word	0x0800331d
 80032b8:	0800331d 	.word	0x0800331d
 80032bc:	0800331d 	.word	0x0800331d
 80032c0:	0800331d 	.word	0x0800331d
 80032c4:	0800331d 	.word	0x0800331d
 80032c8:	0800330d 	.word	0x0800330d
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800331d 	.word	0x0800331d
 80032d4:	0800331d 	.word	0x0800331d
 80032d8:	0800331d 	.word	0x0800331d
 80032dc:	0800331d 	.word	0x0800331d
 80032e0:	0800331d 	.word	0x0800331d
 80032e4:	0800331d 	.word	0x0800331d
 80032e8:	08003315 	.word	0x08003315
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032f2:	e222      	b.n	800373a <UART_SetConfig+0x5a6>
 80032f4:	2304      	movs	r3, #4
 80032f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032fa:	e21e      	b.n	800373a <UART_SetConfig+0x5a6>
 80032fc:	2308      	movs	r3, #8
 80032fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003302:	e21a      	b.n	800373a <UART_SetConfig+0x5a6>
 8003304:	2310      	movs	r3, #16
 8003306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800330a:	e216      	b.n	800373a <UART_SetConfig+0x5a6>
 800330c:	2320      	movs	r3, #32
 800330e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003312:	e212      	b.n	800373a <UART_SetConfig+0x5a6>
 8003314:	2340      	movs	r3, #64	@ 0x40
 8003316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800331a:	e20e      	b.n	800373a <UART_SetConfig+0x5a6>
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003322:	e20a      	b.n	800373a <UART_SetConfig+0x5a6>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a69      	ldr	r2, [pc, #420]	@ (80034d0 <UART_SetConfig+0x33c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d130      	bne.n	8003390 <UART_SetConfig+0x1fc>
 800332e:	4b67      	ldr	r3, [pc, #412]	@ (80034cc <UART_SetConfig+0x338>)
 8003330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	2b05      	cmp	r3, #5
 8003338:	d826      	bhi.n	8003388 <UART_SetConfig+0x1f4>
 800333a:	a201      	add	r2, pc, #4	@ (adr r2, 8003340 <UART_SetConfig+0x1ac>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003359 	.word	0x08003359
 8003344:	08003361 	.word	0x08003361
 8003348:	08003369 	.word	0x08003369
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800335e:	e1ec      	b.n	800373a <UART_SetConfig+0x5a6>
 8003360:	2304      	movs	r3, #4
 8003362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003366:	e1e8      	b.n	800373a <UART_SetConfig+0x5a6>
 8003368:	2308      	movs	r3, #8
 800336a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800336e:	e1e4      	b.n	800373a <UART_SetConfig+0x5a6>
 8003370:	2310      	movs	r3, #16
 8003372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003376:	e1e0      	b.n	800373a <UART_SetConfig+0x5a6>
 8003378:	2320      	movs	r3, #32
 800337a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800337e:	e1dc      	b.n	800373a <UART_SetConfig+0x5a6>
 8003380:	2340      	movs	r3, #64	@ 0x40
 8003382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003386:	e1d8      	b.n	800373a <UART_SetConfig+0x5a6>
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800338e:	e1d4      	b.n	800373a <UART_SetConfig+0x5a6>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a4f      	ldr	r2, [pc, #316]	@ (80034d4 <UART_SetConfig+0x340>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d130      	bne.n	80033fc <UART_SetConfig+0x268>
 800339a:	4b4c      	ldr	r3, [pc, #304]	@ (80034cc <UART_SetConfig+0x338>)
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d826      	bhi.n	80033f4 <UART_SetConfig+0x260>
 80033a6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <UART_SetConfig+0x218>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033c5 	.word	0x080033c5
 80033b0:	080033cd 	.word	0x080033cd
 80033b4:	080033d5 	.word	0x080033d5
 80033b8:	080033dd 	.word	0x080033dd
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ca:	e1b6      	b.n	800373a <UART_SetConfig+0x5a6>
 80033cc:	2304      	movs	r3, #4
 80033ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033d2:	e1b2      	b.n	800373a <UART_SetConfig+0x5a6>
 80033d4:	2308      	movs	r3, #8
 80033d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033da:	e1ae      	b.n	800373a <UART_SetConfig+0x5a6>
 80033dc:	2310      	movs	r3, #16
 80033de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033e2:	e1aa      	b.n	800373a <UART_SetConfig+0x5a6>
 80033e4:	2320      	movs	r3, #32
 80033e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ea:	e1a6      	b.n	800373a <UART_SetConfig+0x5a6>
 80033ec:	2340      	movs	r3, #64	@ 0x40
 80033ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033f2:	e1a2      	b.n	800373a <UART_SetConfig+0x5a6>
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033fa:	e19e      	b.n	800373a <UART_SetConfig+0x5a6>
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a35      	ldr	r2, [pc, #212]	@ (80034d8 <UART_SetConfig+0x344>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d130      	bne.n	8003468 <UART_SetConfig+0x2d4>
 8003406:	4b31      	ldr	r3, [pc, #196]	@ (80034cc <UART_SetConfig+0x338>)
 8003408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	2b05      	cmp	r3, #5
 8003410:	d826      	bhi.n	8003460 <UART_SetConfig+0x2cc>
 8003412:	a201      	add	r2, pc, #4	@ (adr r2, 8003418 <UART_SetConfig+0x284>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	08003431 	.word	0x08003431
 800341c:	08003439 	.word	0x08003439
 8003420:	08003441 	.word	0x08003441
 8003424:	08003449 	.word	0x08003449
 8003428:	08003451 	.word	0x08003451
 800342c:	08003459 	.word	0x08003459
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003436:	e180      	b.n	800373a <UART_SetConfig+0x5a6>
 8003438:	2304      	movs	r3, #4
 800343a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800343e:	e17c      	b.n	800373a <UART_SetConfig+0x5a6>
 8003440:	2308      	movs	r3, #8
 8003442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003446:	e178      	b.n	800373a <UART_SetConfig+0x5a6>
 8003448:	2310      	movs	r3, #16
 800344a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800344e:	e174      	b.n	800373a <UART_SetConfig+0x5a6>
 8003450:	2320      	movs	r3, #32
 8003452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003456:	e170      	b.n	800373a <UART_SetConfig+0x5a6>
 8003458:	2340      	movs	r3, #64	@ 0x40
 800345a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800345e:	e16c      	b.n	800373a <UART_SetConfig+0x5a6>
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003466:	e168      	b.n	800373a <UART_SetConfig+0x5a6>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <UART_SetConfig+0x348>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d142      	bne.n	80034f8 <UART_SetConfig+0x364>
 8003472:	4b16      	ldr	r3, [pc, #88]	@ (80034cc <UART_SetConfig+0x338>)
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	2b05      	cmp	r3, #5
 800347c:	d838      	bhi.n	80034f0 <UART_SetConfig+0x35c>
 800347e:	a201      	add	r2, pc, #4	@ (adr r2, 8003484 <UART_SetConfig+0x2f0>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	0800349d 	.word	0x0800349d
 8003488:	080034a5 	.word	0x080034a5
 800348c:	080034ad 	.word	0x080034ad
 8003490:	080034b5 	.word	0x080034b5
 8003494:	080034e1 	.word	0x080034e1
 8003498:	080034e9 	.word	0x080034e9
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034a2:	e14a      	b.n	800373a <UART_SetConfig+0x5a6>
 80034a4:	2304      	movs	r3, #4
 80034a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034aa:	e146      	b.n	800373a <UART_SetConfig+0x5a6>
 80034ac:	2308      	movs	r3, #8
 80034ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034b2:	e142      	b.n	800373a <UART_SetConfig+0x5a6>
 80034b4:	2310      	movs	r3, #16
 80034b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ba:	e13e      	b.n	800373a <UART_SetConfig+0x5a6>
 80034bc:	cfff69f3 	.word	0xcfff69f3
 80034c0:	58000c00 	.word	0x58000c00
 80034c4:	11fff4ff 	.word	0x11fff4ff
 80034c8:	40011000 	.word	0x40011000
 80034cc:	58024400 	.word	0x58024400
 80034d0:	40004400 	.word	0x40004400
 80034d4:	40004800 	.word	0x40004800
 80034d8:	40004c00 	.word	0x40004c00
 80034dc:	40005000 	.word	0x40005000
 80034e0:	2320      	movs	r3, #32
 80034e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034e6:	e128      	b.n	800373a <UART_SetConfig+0x5a6>
 80034e8:	2340      	movs	r3, #64	@ 0x40
 80034ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ee:	e124      	b.n	800373a <UART_SetConfig+0x5a6>
 80034f0:	2380      	movs	r3, #128	@ 0x80
 80034f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034f6:	e120      	b.n	800373a <UART_SetConfig+0x5a6>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4acb      	ldr	r2, [pc, #812]	@ (800382c <UART_SetConfig+0x698>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d176      	bne.n	80035f0 <UART_SetConfig+0x45c>
 8003502:	4bcb      	ldr	r3, [pc, #812]	@ (8003830 <UART_SetConfig+0x69c>)
 8003504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800350a:	2b28      	cmp	r3, #40	@ 0x28
 800350c:	d86c      	bhi.n	80035e8 <UART_SetConfig+0x454>
 800350e:	a201      	add	r2, pc, #4	@ (adr r2, 8003514 <UART_SetConfig+0x380>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	080035b9 	.word	0x080035b9
 8003518:	080035e9 	.word	0x080035e9
 800351c:	080035e9 	.word	0x080035e9
 8003520:	080035e9 	.word	0x080035e9
 8003524:	080035e9 	.word	0x080035e9
 8003528:	080035e9 	.word	0x080035e9
 800352c:	080035e9 	.word	0x080035e9
 8003530:	080035e9 	.word	0x080035e9
 8003534:	080035c1 	.word	0x080035c1
 8003538:	080035e9 	.word	0x080035e9
 800353c:	080035e9 	.word	0x080035e9
 8003540:	080035e9 	.word	0x080035e9
 8003544:	080035e9 	.word	0x080035e9
 8003548:	080035e9 	.word	0x080035e9
 800354c:	080035e9 	.word	0x080035e9
 8003550:	080035e9 	.word	0x080035e9
 8003554:	080035c9 	.word	0x080035c9
 8003558:	080035e9 	.word	0x080035e9
 800355c:	080035e9 	.word	0x080035e9
 8003560:	080035e9 	.word	0x080035e9
 8003564:	080035e9 	.word	0x080035e9
 8003568:	080035e9 	.word	0x080035e9
 800356c:	080035e9 	.word	0x080035e9
 8003570:	080035e9 	.word	0x080035e9
 8003574:	080035d1 	.word	0x080035d1
 8003578:	080035e9 	.word	0x080035e9
 800357c:	080035e9 	.word	0x080035e9
 8003580:	080035e9 	.word	0x080035e9
 8003584:	080035e9 	.word	0x080035e9
 8003588:	080035e9 	.word	0x080035e9
 800358c:	080035e9 	.word	0x080035e9
 8003590:	080035e9 	.word	0x080035e9
 8003594:	080035d9 	.word	0x080035d9
 8003598:	080035e9 	.word	0x080035e9
 800359c:	080035e9 	.word	0x080035e9
 80035a0:	080035e9 	.word	0x080035e9
 80035a4:	080035e9 	.word	0x080035e9
 80035a8:	080035e9 	.word	0x080035e9
 80035ac:	080035e9 	.word	0x080035e9
 80035b0:	080035e9 	.word	0x080035e9
 80035b4:	080035e1 	.word	0x080035e1
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035be:	e0bc      	b.n	800373a <UART_SetConfig+0x5a6>
 80035c0:	2304      	movs	r3, #4
 80035c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035c6:	e0b8      	b.n	800373a <UART_SetConfig+0x5a6>
 80035c8:	2308      	movs	r3, #8
 80035ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ce:	e0b4      	b.n	800373a <UART_SetConfig+0x5a6>
 80035d0:	2310      	movs	r3, #16
 80035d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035d6:	e0b0      	b.n	800373a <UART_SetConfig+0x5a6>
 80035d8:	2320      	movs	r3, #32
 80035da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035de:	e0ac      	b.n	800373a <UART_SetConfig+0x5a6>
 80035e0:	2340      	movs	r3, #64	@ 0x40
 80035e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035e6:	e0a8      	b.n	800373a <UART_SetConfig+0x5a6>
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ee:	e0a4      	b.n	800373a <UART_SetConfig+0x5a6>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a8f      	ldr	r2, [pc, #572]	@ (8003834 <UART_SetConfig+0x6a0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d130      	bne.n	800365c <UART_SetConfig+0x4c8>
 80035fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003830 <UART_SetConfig+0x69c>)
 80035fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	2b05      	cmp	r3, #5
 8003604:	d826      	bhi.n	8003654 <UART_SetConfig+0x4c0>
 8003606:	a201      	add	r2, pc, #4	@ (adr r2, 800360c <UART_SetConfig+0x478>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	08003625 	.word	0x08003625
 8003610:	0800362d 	.word	0x0800362d
 8003614:	08003635 	.word	0x08003635
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003645 	.word	0x08003645
 8003620:	0800364d 	.word	0x0800364d
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800362a:	e086      	b.n	800373a <UART_SetConfig+0x5a6>
 800362c:	2304      	movs	r3, #4
 800362e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003632:	e082      	b.n	800373a <UART_SetConfig+0x5a6>
 8003634:	2308      	movs	r3, #8
 8003636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800363a:	e07e      	b.n	800373a <UART_SetConfig+0x5a6>
 800363c:	2310      	movs	r3, #16
 800363e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003642:	e07a      	b.n	800373a <UART_SetConfig+0x5a6>
 8003644:	2320      	movs	r3, #32
 8003646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800364a:	e076      	b.n	800373a <UART_SetConfig+0x5a6>
 800364c:	2340      	movs	r3, #64	@ 0x40
 800364e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003652:	e072      	b.n	800373a <UART_SetConfig+0x5a6>
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800365a:	e06e      	b.n	800373a <UART_SetConfig+0x5a6>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a75      	ldr	r2, [pc, #468]	@ (8003838 <UART_SetConfig+0x6a4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d130      	bne.n	80036c8 <UART_SetConfig+0x534>
 8003666:	4b72      	ldr	r3, [pc, #456]	@ (8003830 <UART_SetConfig+0x69c>)
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	2b05      	cmp	r3, #5
 8003670:	d826      	bhi.n	80036c0 <UART_SetConfig+0x52c>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <UART_SetConfig+0x4e4>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	08003691 	.word	0x08003691
 800367c:	08003699 	.word	0x08003699
 8003680:	080036a1 	.word	0x080036a1
 8003684:	080036a9 	.word	0x080036a9
 8003688:	080036b1 	.word	0x080036b1
 800368c:	080036b9 	.word	0x080036b9
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003696:	e050      	b.n	800373a <UART_SetConfig+0x5a6>
 8003698:	2304      	movs	r3, #4
 800369a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800369e:	e04c      	b.n	800373a <UART_SetConfig+0x5a6>
 80036a0:	2308      	movs	r3, #8
 80036a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036a6:	e048      	b.n	800373a <UART_SetConfig+0x5a6>
 80036a8:	2310      	movs	r3, #16
 80036aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036ae:	e044      	b.n	800373a <UART_SetConfig+0x5a6>
 80036b0:	2320      	movs	r3, #32
 80036b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036b6:	e040      	b.n	800373a <UART_SetConfig+0x5a6>
 80036b8:	2340      	movs	r3, #64	@ 0x40
 80036ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036be:	e03c      	b.n	800373a <UART_SetConfig+0x5a6>
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036c6:	e038      	b.n	800373a <UART_SetConfig+0x5a6>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a5b      	ldr	r2, [pc, #364]	@ (800383c <UART_SetConfig+0x6a8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d130      	bne.n	8003734 <UART_SetConfig+0x5a0>
 80036d2:	4b57      	ldr	r3, [pc, #348]	@ (8003830 <UART_SetConfig+0x69c>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d826      	bhi.n	800372c <UART_SetConfig+0x598>
 80036de:	a201      	add	r2, pc, #4	@ (adr r2, 80036e4 <UART_SetConfig+0x550>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	080036fd 	.word	0x080036fd
 80036e8:	08003705 	.word	0x08003705
 80036ec:	0800370d 	.word	0x0800370d
 80036f0:	08003715 	.word	0x08003715
 80036f4:	0800371d 	.word	0x0800371d
 80036f8:	08003725 	.word	0x08003725
 80036fc:	2302      	movs	r3, #2
 80036fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003702:	e01a      	b.n	800373a <UART_SetConfig+0x5a6>
 8003704:	2304      	movs	r3, #4
 8003706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800370a:	e016      	b.n	800373a <UART_SetConfig+0x5a6>
 800370c:	2308      	movs	r3, #8
 800370e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003712:	e012      	b.n	800373a <UART_SetConfig+0x5a6>
 8003714:	2310      	movs	r3, #16
 8003716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800371a:	e00e      	b.n	800373a <UART_SetConfig+0x5a6>
 800371c:	2320      	movs	r3, #32
 800371e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003722:	e00a      	b.n	800373a <UART_SetConfig+0x5a6>
 8003724:	2340      	movs	r3, #64	@ 0x40
 8003726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800372a:	e006      	b.n	800373a <UART_SetConfig+0x5a6>
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003732:	e002      	b.n	800373a <UART_SetConfig+0x5a6>
 8003734:	2380      	movs	r3, #128	@ 0x80
 8003736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a3f      	ldr	r2, [pc, #252]	@ (800383c <UART_SetConfig+0x6a8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	f040 80f8 	bne.w	8003936 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003746:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800374a:	2b20      	cmp	r3, #32
 800374c:	dc46      	bgt.n	80037dc <UART_SetConfig+0x648>
 800374e:	2b02      	cmp	r3, #2
 8003750:	f2c0 8082 	blt.w	8003858 <UART_SetConfig+0x6c4>
 8003754:	3b02      	subs	r3, #2
 8003756:	2b1e      	cmp	r3, #30
 8003758:	d87e      	bhi.n	8003858 <UART_SetConfig+0x6c4>
 800375a:	a201      	add	r2, pc, #4	@ (adr r2, 8003760 <UART_SetConfig+0x5cc>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	080037e3 	.word	0x080037e3
 8003764:	08003859 	.word	0x08003859
 8003768:	080037eb 	.word	0x080037eb
 800376c:	08003859 	.word	0x08003859
 8003770:	08003859 	.word	0x08003859
 8003774:	08003859 	.word	0x08003859
 8003778:	080037fb 	.word	0x080037fb
 800377c:	08003859 	.word	0x08003859
 8003780:	08003859 	.word	0x08003859
 8003784:	08003859 	.word	0x08003859
 8003788:	08003859 	.word	0x08003859
 800378c:	08003859 	.word	0x08003859
 8003790:	08003859 	.word	0x08003859
 8003794:	08003859 	.word	0x08003859
 8003798:	0800380b 	.word	0x0800380b
 800379c:	08003859 	.word	0x08003859
 80037a0:	08003859 	.word	0x08003859
 80037a4:	08003859 	.word	0x08003859
 80037a8:	08003859 	.word	0x08003859
 80037ac:	08003859 	.word	0x08003859
 80037b0:	08003859 	.word	0x08003859
 80037b4:	08003859 	.word	0x08003859
 80037b8:	08003859 	.word	0x08003859
 80037bc:	08003859 	.word	0x08003859
 80037c0:	08003859 	.word	0x08003859
 80037c4:	08003859 	.word	0x08003859
 80037c8:	08003859 	.word	0x08003859
 80037cc:	08003859 	.word	0x08003859
 80037d0:	08003859 	.word	0x08003859
 80037d4:	08003859 	.word	0x08003859
 80037d8:	0800384b 	.word	0x0800384b
 80037dc:	2b40      	cmp	r3, #64	@ 0x40
 80037de:	d037      	beq.n	8003850 <UART_SetConfig+0x6bc>
 80037e0:	e03a      	b.n	8003858 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80037e2:	f7ff f931 	bl	8002a48 <HAL_RCCEx_GetD3PCLK1Freq>
 80037e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80037e8:	e03c      	b.n	8003864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f940 	bl	8002a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037f8:	e034      	b.n	8003864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037fa:	f107 0318 	add.w	r3, r7, #24
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fa8c 	bl	8002d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003808:	e02c      	b.n	8003864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800380a:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <UART_SetConfig+0x69c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <UART_SetConfig+0x69c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	08db      	lsrs	r3, r3, #3
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	4a07      	ldr	r2, [pc, #28]	@ (8003840 <UART_SetConfig+0x6ac>)
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003828:	e01c      	b.n	8003864 <UART_SetConfig+0x6d0>
 800382a:	bf00      	nop
 800382c:	40011400 	.word	0x40011400
 8003830:	58024400 	.word	0x58024400
 8003834:	40007800 	.word	0x40007800
 8003838:	40007c00 	.word	0x40007c00
 800383c:	58000c00 	.word	0x58000c00
 8003840:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8003844:	4b9d      	ldr	r3, [pc, #628]	@ (8003abc <UART_SetConfig+0x928>)
 8003846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003848:	e00c      	b.n	8003864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800384a:	4b9d      	ldr	r3, [pc, #628]	@ (8003ac0 <UART_SetConfig+0x92c>)
 800384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800384e:	e009      	b.n	8003864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003856:	e005      	b.n	8003864 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003862:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 81de 	beq.w	8003c28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	4a94      	ldr	r2, [pc, #592]	@ (8003ac4 <UART_SetConfig+0x930>)
 8003872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003876:	461a      	mov	r2, r3
 8003878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800387a:	fbb3 f3f2 	udiv	r3, r3, r2
 800387e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800388c:	429a      	cmp	r2, r3
 800388e:	d305      	bcc.n	800389c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003898:	429a      	cmp	r2, r3
 800389a:	d903      	bls.n	80038a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80038a2:	e1c1      	b.n	8003c28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a6:	2200      	movs	r2, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	4a84      	ldr	r2, [pc, #528]	@ (8003ac4 <UART_SetConfig+0x930>)
 80038b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2200      	movs	r2, #0
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038c6:	f7fc fd5b 	bl	8000380 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4610      	mov	r0, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	020b      	lsls	r3, r1, #8
 80038dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038e0:	0202      	lsls	r2, r0, #8
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	6849      	ldr	r1, [r1, #4]
 80038e6:	0849      	lsrs	r1, r1, #1
 80038e8:	2000      	movs	r0, #0
 80038ea:	460c      	mov	r4, r1
 80038ec:	4605      	mov	r5, r0
 80038ee:	eb12 0804 	adds.w	r8, r2, r4
 80038f2:	eb43 0905 	adc.w	r9, r3, r5
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	469a      	mov	sl, r3
 80038fe:	4693      	mov	fp, r2
 8003900:	4652      	mov	r2, sl
 8003902:	465b      	mov	r3, fp
 8003904:	4640      	mov	r0, r8
 8003906:	4649      	mov	r1, r9
 8003908:	f7fc fd3a 	bl	8000380 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391a:	d308      	bcc.n	800392e <UART_SetConfig+0x79a>
 800391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003922:	d204      	bcs.n	800392e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	e17c      	b.n	8003c28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003934:	e178      	b.n	8003c28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800393e:	f040 80c5 	bne.w	8003acc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8003942:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003946:	2b20      	cmp	r3, #32
 8003948:	dc48      	bgt.n	80039dc <UART_SetConfig+0x848>
 800394a:	2b00      	cmp	r3, #0
 800394c:	db7b      	blt.n	8003a46 <UART_SetConfig+0x8b2>
 800394e:	2b20      	cmp	r3, #32
 8003950:	d879      	bhi.n	8003a46 <UART_SetConfig+0x8b2>
 8003952:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <UART_SetConfig+0x7c4>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	080039e3 	.word	0x080039e3
 800395c:	080039eb 	.word	0x080039eb
 8003960:	08003a47 	.word	0x08003a47
 8003964:	08003a47 	.word	0x08003a47
 8003968:	080039f3 	.word	0x080039f3
 800396c:	08003a47 	.word	0x08003a47
 8003970:	08003a47 	.word	0x08003a47
 8003974:	08003a47 	.word	0x08003a47
 8003978:	08003a03 	.word	0x08003a03
 800397c:	08003a47 	.word	0x08003a47
 8003980:	08003a47 	.word	0x08003a47
 8003984:	08003a47 	.word	0x08003a47
 8003988:	08003a47 	.word	0x08003a47
 800398c:	08003a47 	.word	0x08003a47
 8003990:	08003a47 	.word	0x08003a47
 8003994:	08003a47 	.word	0x08003a47
 8003998:	08003a13 	.word	0x08003a13
 800399c:	08003a47 	.word	0x08003a47
 80039a0:	08003a47 	.word	0x08003a47
 80039a4:	08003a47 	.word	0x08003a47
 80039a8:	08003a47 	.word	0x08003a47
 80039ac:	08003a47 	.word	0x08003a47
 80039b0:	08003a47 	.word	0x08003a47
 80039b4:	08003a47 	.word	0x08003a47
 80039b8:	08003a47 	.word	0x08003a47
 80039bc:	08003a47 	.word	0x08003a47
 80039c0:	08003a47 	.word	0x08003a47
 80039c4:	08003a47 	.word	0x08003a47
 80039c8:	08003a47 	.word	0x08003a47
 80039cc:	08003a47 	.word	0x08003a47
 80039d0:	08003a47 	.word	0x08003a47
 80039d4:	08003a47 	.word	0x08003a47
 80039d8:	08003a39 	.word	0x08003a39
 80039dc:	2b40      	cmp	r3, #64	@ 0x40
 80039de:	d02e      	beq.n	8003a3e <UART_SetConfig+0x8aa>
 80039e0:	e031      	b.n	8003a46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e2:	f7ff f805 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 80039e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80039e8:	e033      	b.n	8003a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039ea:	f7ff f817 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 80039ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80039f0:	e02f      	b.n	8003a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff f83c 	bl	8002a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80039fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a00:	e027      	b.n	8003a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a02:	f107 0318 	add.w	r3, r7, #24
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f988 	bl	8002d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a10:	e01f      	b.n	8003a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a12:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac8 <UART_SetConfig+0x934>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac8 <UART_SetConfig+0x934>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	08db      	lsrs	r3, r3, #3
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	4a24      	ldr	r2, [pc, #144]	@ (8003abc <UART_SetConfig+0x928>)
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a30:	e00f      	b.n	8003a52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8003a32:	4b22      	ldr	r3, [pc, #136]	@ (8003abc <UART_SetConfig+0x928>)
 8003a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a36:	e00c      	b.n	8003a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003a38:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <UART_SetConfig+0x92c>)
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a3c:	e009      	b.n	8003a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a44:	e005      	b.n	8003a52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80e7 	beq.w	8003c28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	4a19      	ldr	r2, [pc, #100]	@ (8003ac4 <UART_SetConfig+0x930>)
 8003a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a64:	461a      	mov	r2, r3
 8003a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a6c:	005a      	lsls	r2, r3, #1
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	441a      	add	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	d916      	bls.n	8003ab4 <UART_SetConfig+0x920>
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8c:	d212      	bcs.n	8003ab4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f023 030f 	bic.w	r3, r3, #15
 8003a96:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	e0b9      	b.n	8003c28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003aba:	e0b5      	b.n	8003c28 <UART_SetConfig+0xa94>
 8003abc:	03d09000 	.word	0x03d09000
 8003ac0:	003d0900 	.word	0x003d0900
 8003ac4:	08004f50 	.word	0x08004f50
 8003ac8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8003acc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	dc49      	bgt.n	8003b68 <UART_SetConfig+0x9d4>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	db7c      	blt.n	8003bd2 <UART_SetConfig+0xa3e>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d87a      	bhi.n	8003bd2 <UART_SetConfig+0xa3e>
 8003adc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <UART_SetConfig+0x950>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003b6f 	.word	0x08003b6f
 8003ae8:	08003b77 	.word	0x08003b77
 8003aec:	08003bd3 	.word	0x08003bd3
 8003af0:	08003bd3 	.word	0x08003bd3
 8003af4:	08003b7f 	.word	0x08003b7f
 8003af8:	08003bd3 	.word	0x08003bd3
 8003afc:	08003bd3 	.word	0x08003bd3
 8003b00:	08003bd3 	.word	0x08003bd3
 8003b04:	08003b8f 	.word	0x08003b8f
 8003b08:	08003bd3 	.word	0x08003bd3
 8003b0c:	08003bd3 	.word	0x08003bd3
 8003b10:	08003bd3 	.word	0x08003bd3
 8003b14:	08003bd3 	.word	0x08003bd3
 8003b18:	08003bd3 	.word	0x08003bd3
 8003b1c:	08003bd3 	.word	0x08003bd3
 8003b20:	08003bd3 	.word	0x08003bd3
 8003b24:	08003b9f 	.word	0x08003b9f
 8003b28:	08003bd3 	.word	0x08003bd3
 8003b2c:	08003bd3 	.word	0x08003bd3
 8003b30:	08003bd3 	.word	0x08003bd3
 8003b34:	08003bd3 	.word	0x08003bd3
 8003b38:	08003bd3 	.word	0x08003bd3
 8003b3c:	08003bd3 	.word	0x08003bd3
 8003b40:	08003bd3 	.word	0x08003bd3
 8003b44:	08003bd3 	.word	0x08003bd3
 8003b48:	08003bd3 	.word	0x08003bd3
 8003b4c:	08003bd3 	.word	0x08003bd3
 8003b50:	08003bd3 	.word	0x08003bd3
 8003b54:	08003bd3 	.word	0x08003bd3
 8003b58:	08003bd3 	.word	0x08003bd3
 8003b5c:	08003bd3 	.word	0x08003bd3
 8003b60:	08003bd3 	.word	0x08003bd3
 8003b64:	08003bc5 	.word	0x08003bc5
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	d02e      	beq.n	8003bca <UART_SetConfig+0xa36>
 8003b6c:	e031      	b.n	8003bd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6e:	f7fe ff3f 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8003b72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003b74:	e033      	b.n	8003bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b76:	f7fe ff51 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003b7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003b7c:	e02f      	b.n	8003bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe ff76 	bl	8002a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b8c:	e027      	b.n	8003bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b8e:	f107 0318 	add.w	r3, r7, #24
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f8c2 	bl	8002d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b9c:	e01f      	b.n	8003bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c54 <UART_SetConfig+0xac0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003baa:	4b2a      	ldr	r3, [pc, #168]	@ (8003c54 <UART_SetConfig+0xac0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	08db      	lsrs	r3, r3, #3
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	4a28      	ldr	r2, [pc, #160]	@ (8003c58 <UART_SetConfig+0xac4>)
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003bbc:	e00f      	b.n	8003bde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8003bbe:	4b26      	ldr	r3, [pc, #152]	@ (8003c58 <UART_SetConfig+0xac4>)
 8003bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bc2:	e00c      	b.n	8003bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003bc4:	4b25      	ldr	r3, [pc, #148]	@ (8003c5c <UART_SetConfig+0xac8>)
 8003bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bc8:	e009      	b.n	8003bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bd0:	e005      	b.n	8003bde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8003bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d021      	beq.n	8003c28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c60 <UART_SetConfig+0xacc>)
 8003bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	441a      	add	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	2b0f      	cmp	r3, #15
 8003c0c:	d909      	bls.n	8003c22 <UART_SetConfig+0xa8e>
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d205      	bcs.n	8003c22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60da      	str	r2, [r3, #12]
 8003c20:	e002      	b.n	8003c28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2200      	movs	r2, #0
 8003c42:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c44:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3748      	adds	r7, #72	@ 0x48
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400
 8003c58:	03d09000 	.word	0x03d09000
 8003c5c:	003d0900 	.word	0x003d0900
 8003c60:	08004f50 	.word	0x08004f50

08003c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01a      	beq.n	8003d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d62:	d10a      	bne.n	8003d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b098      	sub	sp, #96	@ 0x60
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003db8:	f7fd fa3e 	bl	8001238 <HAL_GetTick>
 8003dbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d12f      	bne.n	8003e2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f88e 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d022      	beq.n	8003e2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e6      	bne.n	8003de6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e063      	b.n	8003ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d149      	bne.n	8003ece <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e42:	2200      	movs	r2, #0
 8003e44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f857 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03c      	beq.n	8003ece <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	623b      	str	r3, [r7, #32]
   return(result);
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e6      	bne.n	8003e54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ea6:	61fa      	str	r2, [r7, #28]
 8003ea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	69b9      	ldr	r1, [r7, #24]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e012      	b.n	8003ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3758      	adds	r7, #88	@ 0x58
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0c:	e04f      	b.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d04b      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fd f98f 	bl	8001238 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e04e      	b.n	8003fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d037      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b80      	cmp	r3, #128	@ 0x80
 8003f42:	d034      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b40      	cmp	r3, #64	@ 0x40
 8003f48:	d031      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d110      	bne.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f839 	bl	8003fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e029      	b.n	8003fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f88:	d111      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f81f 	bl	8003fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e00f      	b.n	8003fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d0a0      	beq.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b095      	sub	sp, #84	@ 0x54
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ffe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004000:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004004:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800400c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e6      	bne.n	8003fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3308      	adds	r3, #8
 8004018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	61fb      	str	r3, [r7, #28]
   return(result);
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	4b1e      	ldr	r3, [pc, #120]	@ (80040a0 <UART_EndRxTransfer+0xc8>)
 8004026:	4013      	ands	r3, r2
 8004028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3308      	adds	r3, #8
 8004030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004032:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004034:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d118      	bne.n	8004080 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	60bb      	str	r3, [r7, #8]
   return(result);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 0310 	bic.w	r3, r3, #16
 8004062:	647b      	str	r3, [r7, #68]	@ 0x44
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6979      	ldr	r1, [r7, #20]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	613b      	str	r3, [r7, #16]
   return(result);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e6      	bne.n	800404e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004094:	bf00      	nop
 8004096:	3754      	adds	r7, #84	@ 0x54
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	effffffe 	.word	0xeffffffe

080040a4 <std>:
 80040a4:	2300      	movs	r3, #0
 80040a6:	b510      	push	{r4, lr}
 80040a8:	4604      	mov	r4, r0
 80040aa:	e9c0 3300 	strd	r3, r3, [r0]
 80040ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040b2:	6083      	str	r3, [r0, #8]
 80040b4:	8181      	strh	r1, [r0, #12]
 80040b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80040b8:	81c2      	strh	r2, [r0, #14]
 80040ba:	6183      	str	r3, [r0, #24]
 80040bc:	4619      	mov	r1, r3
 80040be:	2208      	movs	r2, #8
 80040c0:	305c      	adds	r0, #92	@ 0x5c
 80040c2:	f000 f906 	bl	80042d2 <memset>
 80040c6:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <std+0x58>)
 80040c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80040ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <std+0x5c>)
 80040cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <std+0x60>)
 80040d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <std+0x64>)
 80040d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80040d6:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <std+0x68>)
 80040d8:	6224      	str	r4, [r4, #32]
 80040da:	429c      	cmp	r4, r3
 80040dc:	d006      	beq.n	80040ec <std+0x48>
 80040de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80040e2:	4294      	cmp	r4, r2
 80040e4:	d002      	beq.n	80040ec <std+0x48>
 80040e6:	33d0      	adds	r3, #208	@ 0xd0
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d105      	bne.n	80040f8 <std+0x54>
 80040ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f4:	f000 b966 	b.w	80043c4 <__retarget_lock_init_recursive>
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	bf00      	nop
 80040fc:	0800424d 	.word	0x0800424d
 8004100:	0800426f 	.word	0x0800426f
 8004104:	080042a7 	.word	0x080042a7
 8004108:	080042cb 	.word	0x080042cb
 800410c:	24000160 	.word	0x24000160

08004110 <stdio_exit_handler>:
 8004110:	4a02      	ldr	r2, [pc, #8]	@ (800411c <stdio_exit_handler+0xc>)
 8004112:	4903      	ldr	r1, [pc, #12]	@ (8004120 <stdio_exit_handler+0x10>)
 8004114:	4803      	ldr	r0, [pc, #12]	@ (8004124 <stdio_exit_handler+0x14>)
 8004116:	f000 b869 	b.w	80041ec <_fwalk_sglue>
 800411a:	bf00      	nop
 800411c:	2400002c 	.word	0x2400002c
 8004120:	08004c61 	.word	0x08004c61
 8004124:	2400003c 	.word	0x2400003c

08004128 <cleanup_stdio>:
 8004128:	6841      	ldr	r1, [r0, #4]
 800412a:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <cleanup_stdio+0x34>)
 800412c:	4299      	cmp	r1, r3
 800412e:	b510      	push	{r4, lr}
 8004130:	4604      	mov	r4, r0
 8004132:	d001      	beq.n	8004138 <cleanup_stdio+0x10>
 8004134:	f000 fd94 	bl	8004c60 <_fflush_r>
 8004138:	68a1      	ldr	r1, [r4, #8]
 800413a:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <cleanup_stdio+0x38>)
 800413c:	4299      	cmp	r1, r3
 800413e:	d002      	beq.n	8004146 <cleanup_stdio+0x1e>
 8004140:	4620      	mov	r0, r4
 8004142:	f000 fd8d 	bl	8004c60 <_fflush_r>
 8004146:	68e1      	ldr	r1, [r4, #12]
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <cleanup_stdio+0x3c>)
 800414a:	4299      	cmp	r1, r3
 800414c:	d004      	beq.n	8004158 <cleanup_stdio+0x30>
 800414e:	4620      	mov	r0, r4
 8004150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004154:	f000 bd84 	b.w	8004c60 <_fflush_r>
 8004158:	bd10      	pop	{r4, pc}
 800415a:	bf00      	nop
 800415c:	24000160 	.word	0x24000160
 8004160:	240001c8 	.word	0x240001c8
 8004164:	24000230 	.word	0x24000230

08004168 <global_stdio_init.part.0>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <global_stdio_init.part.0+0x30>)
 800416c:	4c0b      	ldr	r4, [pc, #44]	@ (800419c <global_stdio_init.part.0+0x34>)
 800416e:	4a0c      	ldr	r2, [pc, #48]	@ (80041a0 <global_stdio_init.part.0+0x38>)
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	4620      	mov	r0, r4
 8004174:	2200      	movs	r2, #0
 8004176:	2104      	movs	r1, #4
 8004178:	f7ff ff94 	bl	80040a4 <std>
 800417c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004180:	2201      	movs	r2, #1
 8004182:	2109      	movs	r1, #9
 8004184:	f7ff ff8e 	bl	80040a4 <std>
 8004188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800418c:	2202      	movs	r2, #2
 800418e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004192:	2112      	movs	r1, #18
 8004194:	f7ff bf86 	b.w	80040a4 <std>
 8004198:	24000298 	.word	0x24000298
 800419c:	24000160 	.word	0x24000160
 80041a0:	08004111 	.word	0x08004111

080041a4 <__sfp_lock_acquire>:
 80041a4:	4801      	ldr	r0, [pc, #4]	@ (80041ac <__sfp_lock_acquire+0x8>)
 80041a6:	f000 b90e 	b.w	80043c6 <__retarget_lock_acquire_recursive>
 80041aa:	bf00      	nop
 80041ac:	240002a1 	.word	0x240002a1

080041b0 <__sfp_lock_release>:
 80041b0:	4801      	ldr	r0, [pc, #4]	@ (80041b8 <__sfp_lock_release+0x8>)
 80041b2:	f000 b909 	b.w	80043c8 <__retarget_lock_release_recursive>
 80041b6:	bf00      	nop
 80041b8:	240002a1 	.word	0x240002a1

080041bc <__sinit>:
 80041bc:	b510      	push	{r4, lr}
 80041be:	4604      	mov	r4, r0
 80041c0:	f7ff fff0 	bl	80041a4 <__sfp_lock_acquire>
 80041c4:	6a23      	ldr	r3, [r4, #32]
 80041c6:	b11b      	cbz	r3, 80041d0 <__sinit+0x14>
 80041c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041cc:	f7ff bff0 	b.w	80041b0 <__sfp_lock_release>
 80041d0:	4b04      	ldr	r3, [pc, #16]	@ (80041e4 <__sinit+0x28>)
 80041d2:	6223      	str	r3, [r4, #32]
 80041d4:	4b04      	ldr	r3, [pc, #16]	@ (80041e8 <__sinit+0x2c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f5      	bne.n	80041c8 <__sinit+0xc>
 80041dc:	f7ff ffc4 	bl	8004168 <global_stdio_init.part.0>
 80041e0:	e7f2      	b.n	80041c8 <__sinit+0xc>
 80041e2:	bf00      	nop
 80041e4:	08004129 	.word	0x08004129
 80041e8:	24000298 	.word	0x24000298

080041ec <_fwalk_sglue>:
 80041ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f0:	4607      	mov	r7, r0
 80041f2:	4688      	mov	r8, r1
 80041f4:	4614      	mov	r4, r2
 80041f6:	2600      	movs	r6, #0
 80041f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004200:	d505      	bpl.n	800420e <_fwalk_sglue+0x22>
 8004202:	6824      	ldr	r4, [r4, #0]
 8004204:	2c00      	cmp	r4, #0
 8004206:	d1f7      	bne.n	80041f8 <_fwalk_sglue+0xc>
 8004208:	4630      	mov	r0, r6
 800420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800420e:	89ab      	ldrh	r3, [r5, #12]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d907      	bls.n	8004224 <_fwalk_sglue+0x38>
 8004214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004218:	3301      	adds	r3, #1
 800421a:	d003      	beq.n	8004224 <_fwalk_sglue+0x38>
 800421c:	4629      	mov	r1, r5
 800421e:	4638      	mov	r0, r7
 8004220:	47c0      	blx	r8
 8004222:	4306      	orrs	r6, r0
 8004224:	3568      	adds	r5, #104	@ 0x68
 8004226:	e7e9      	b.n	80041fc <_fwalk_sglue+0x10>

08004228 <iprintf>:
 8004228:	b40f      	push	{r0, r1, r2, r3}
 800422a:	b507      	push	{r0, r1, r2, lr}
 800422c:	4906      	ldr	r1, [pc, #24]	@ (8004248 <iprintf+0x20>)
 800422e:	ab04      	add	r3, sp, #16
 8004230:	6808      	ldr	r0, [r1, #0]
 8004232:	f853 2b04 	ldr.w	r2, [r3], #4
 8004236:	6881      	ldr	r1, [r0, #8]
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	f000 f9e9 	bl	8004610 <_vfiprintf_r>
 800423e:	b003      	add	sp, #12
 8004240:	f85d eb04 	ldr.w	lr, [sp], #4
 8004244:	b004      	add	sp, #16
 8004246:	4770      	bx	lr
 8004248:	24000038 	.word	0x24000038

0800424c <__sread>:
 800424c:	b510      	push	{r4, lr}
 800424e:	460c      	mov	r4, r1
 8004250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004254:	f000 f868 	bl	8004328 <_read_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	bfab      	itete	ge
 800425c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800425e:	89a3      	ldrhlt	r3, [r4, #12]
 8004260:	181b      	addge	r3, r3, r0
 8004262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004266:	bfac      	ite	ge
 8004268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800426a:	81a3      	strhlt	r3, [r4, #12]
 800426c:	bd10      	pop	{r4, pc}

0800426e <__swrite>:
 800426e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004272:	461f      	mov	r7, r3
 8004274:	898b      	ldrh	r3, [r1, #12]
 8004276:	05db      	lsls	r3, r3, #23
 8004278:	4605      	mov	r5, r0
 800427a:	460c      	mov	r4, r1
 800427c:	4616      	mov	r6, r2
 800427e:	d505      	bpl.n	800428c <__swrite+0x1e>
 8004280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004284:	2302      	movs	r3, #2
 8004286:	2200      	movs	r2, #0
 8004288:	f000 f83c 	bl	8004304 <_lseek_r>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	4632      	mov	r2, r6
 800429a:	463b      	mov	r3, r7
 800429c:	4628      	mov	r0, r5
 800429e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042a2:	f000 b853 	b.w	800434c <_write_r>

080042a6 <__sseek>:
 80042a6:	b510      	push	{r4, lr}
 80042a8:	460c      	mov	r4, r1
 80042aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ae:	f000 f829 	bl	8004304 <_lseek_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	bf15      	itete	ne
 80042b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80042ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80042be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80042c2:	81a3      	strheq	r3, [r4, #12]
 80042c4:	bf18      	it	ne
 80042c6:	81a3      	strhne	r3, [r4, #12]
 80042c8:	bd10      	pop	{r4, pc}

080042ca <__sclose>:
 80042ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ce:	f000 b809 	b.w	80042e4 <_close_r>

080042d2 <memset>:
 80042d2:	4402      	add	r2, r0
 80042d4:	4603      	mov	r3, r0
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d100      	bne.n	80042dc <memset+0xa>
 80042da:	4770      	bx	lr
 80042dc:	f803 1b01 	strb.w	r1, [r3], #1
 80042e0:	e7f9      	b.n	80042d6 <memset+0x4>
	...

080042e4 <_close_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4d06      	ldr	r5, [pc, #24]	@ (8004300 <_close_r+0x1c>)
 80042e8:	2300      	movs	r3, #0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fc fba1 	bl	8000a36 <_close>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_close_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_close_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	2400029c 	.word	0x2400029c

08004304 <_lseek_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4d07      	ldr	r5, [pc, #28]	@ (8004324 <_lseek_r+0x20>)
 8004308:	4604      	mov	r4, r0
 800430a:	4608      	mov	r0, r1
 800430c:	4611      	mov	r1, r2
 800430e:	2200      	movs	r2, #0
 8004310:	602a      	str	r2, [r5, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f7fc fbb6 	bl	8000a84 <_lseek>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_lseek_r+0x1e>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	b103      	cbz	r3, 8004322 <_lseek_r+0x1e>
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	2400029c 	.word	0x2400029c

08004328 <_read_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4d07      	ldr	r5, [pc, #28]	@ (8004348 <_read_r+0x20>)
 800432c:	4604      	mov	r4, r0
 800432e:	4608      	mov	r0, r1
 8004330:	4611      	mov	r1, r2
 8004332:	2200      	movs	r2, #0
 8004334:	602a      	str	r2, [r5, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	f7fc fb44 	bl	80009c4 <_read>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d102      	bne.n	8004346 <_read_r+0x1e>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b103      	cbz	r3, 8004346 <_read_r+0x1e>
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	2400029c 	.word	0x2400029c

0800434c <_write_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4d07      	ldr	r5, [pc, #28]	@ (800436c <_write_r+0x20>)
 8004350:	4604      	mov	r4, r0
 8004352:	4608      	mov	r0, r1
 8004354:	4611      	mov	r1, r2
 8004356:	2200      	movs	r2, #0
 8004358:	602a      	str	r2, [r5, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	f7fc fb4f 	bl	80009fe <_write>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_write_r+0x1e>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_write_r+0x1e>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	2400029c 	.word	0x2400029c

08004370 <__errno>:
 8004370:	4b01      	ldr	r3, [pc, #4]	@ (8004378 <__errno+0x8>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	24000038 	.word	0x24000038

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4d0d      	ldr	r5, [pc, #52]	@ (80043b4 <__libc_init_array+0x38>)
 8004380:	4c0d      	ldr	r4, [pc, #52]	@ (80043b8 <__libc_init_array+0x3c>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	2600      	movs	r6, #0
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	4d0b      	ldr	r5, [pc, #44]	@ (80043bc <__libc_init_array+0x40>)
 800438e:	4c0c      	ldr	r4, [pc, #48]	@ (80043c0 <__libc_init_array+0x44>)
 8004390:	f000 fdb6 	bl	8004f00 <_init>
 8004394:	1b64      	subs	r4, r4, r5
 8004396:	10a4      	asrs	r4, r4, #2
 8004398:	2600      	movs	r6, #0
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	08004fa4 	.word	0x08004fa4
 80043b8:	08004fa4 	.word	0x08004fa4
 80043bc:	08004fa4 	.word	0x08004fa4
 80043c0:	08004fa8 	.word	0x08004fa8

080043c4 <__retarget_lock_init_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_acquire_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <__retarget_lock_release_recursive>:
 80043c8:	4770      	bx	lr
	...

080043cc <_free_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4605      	mov	r5, r0
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d041      	beq.n	8004458 <_free_r+0x8c>
 80043d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d8:	1f0c      	subs	r4, r1, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfb8      	it	lt
 80043de:	18e4      	addlt	r4, r4, r3
 80043e0:	f000 f8e0 	bl	80045a4 <__malloc_lock>
 80043e4:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <_free_r+0x90>)
 80043e6:	6813      	ldr	r3, [r2, #0]
 80043e8:	b933      	cbnz	r3, 80043f8 <_free_r+0x2c>
 80043ea:	6063      	str	r3, [r4, #4]
 80043ec:	6014      	str	r4, [r2, #0]
 80043ee:	4628      	mov	r0, r5
 80043f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043f4:	f000 b8dc 	b.w	80045b0 <__malloc_unlock>
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	d908      	bls.n	800440e <_free_r+0x42>
 80043fc:	6820      	ldr	r0, [r4, #0]
 80043fe:	1821      	adds	r1, r4, r0
 8004400:	428b      	cmp	r3, r1
 8004402:	bf01      	itttt	eq
 8004404:	6819      	ldreq	r1, [r3, #0]
 8004406:	685b      	ldreq	r3, [r3, #4]
 8004408:	1809      	addeq	r1, r1, r0
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	e7ed      	b.n	80043ea <_free_r+0x1e>
 800440e:	461a      	mov	r2, r3
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b10b      	cbz	r3, 8004418 <_free_r+0x4c>
 8004414:	42a3      	cmp	r3, r4
 8004416:	d9fa      	bls.n	800440e <_free_r+0x42>
 8004418:	6811      	ldr	r1, [r2, #0]
 800441a:	1850      	adds	r0, r2, r1
 800441c:	42a0      	cmp	r0, r4
 800441e:	d10b      	bne.n	8004438 <_free_r+0x6c>
 8004420:	6820      	ldr	r0, [r4, #0]
 8004422:	4401      	add	r1, r0
 8004424:	1850      	adds	r0, r2, r1
 8004426:	4283      	cmp	r3, r0
 8004428:	6011      	str	r1, [r2, #0]
 800442a:	d1e0      	bne.n	80043ee <_free_r+0x22>
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	6053      	str	r3, [r2, #4]
 8004432:	4408      	add	r0, r1
 8004434:	6010      	str	r0, [r2, #0]
 8004436:	e7da      	b.n	80043ee <_free_r+0x22>
 8004438:	d902      	bls.n	8004440 <_free_r+0x74>
 800443a:	230c      	movs	r3, #12
 800443c:	602b      	str	r3, [r5, #0]
 800443e:	e7d6      	b.n	80043ee <_free_r+0x22>
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	1821      	adds	r1, r4, r0
 8004444:	428b      	cmp	r3, r1
 8004446:	bf04      	itt	eq
 8004448:	6819      	ldreq	r1, [r3, #0]
 800444a:	685b      	ldreq	r3, [r3, #4]
 800444c:	6063      	str	r3, [r4, #4]
 800444e:	bf04      	itt	eq
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	6054      	str	r4, [r2, #4]
 8004456:	e7ca      	b.n	80043ee <_free_r+0x22>
 8004458:	bd38      	pop	{r3, r4, r5, pc}
 800445a:	bf00      	nop
 800445c:	240002a8 	.word	0x240002a8

08004460 <sbrk_aligned>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	4e0f      	ldr	r6, [pc, #60]	@ (80044a0 <sbrk_aligned+0x40>)
 8004464:	460c      	mov	r4, r1
 8004466:	6831      	ldr	r1, [r6, #0]
 8004468:	4605      	mov	r5, r0
 800446a:	b911      	cbnz	r1, 8004472 <sbrk_aligned+0x12>
 800446c:	f000 fcb4 	bl	8004dd8 <_sbrk_r>
 8004470:	6030      	str	r0, [r6, #0]
 8004472:	4621      	mov	r1, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 fcaf 	bl	8004dd8 <_sbrk_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d103      	bne.n	8004486 <sbrk_aligned+0x26>
 800447e:	f04f 34ff 	mov.w	r4, #4294967295
 8004482:	4620      	mov	r0, r4
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	1cc4      	adds	r4, r0, #3
 8004488:	f024 0403 	bic.w	r4, r4, #3
 800448c:	42a0      	cmp	r0, r4
 800448e:	d0f8      	beq.n	8004482 <sbrk_aligned+0x22>
 8004490:	1a21      	subs	r1, r4, r0
 8004492:	4628      	mov	r0, r5
 8004494:	f000 fca0 	bl	8004dd8 <_sbrk_r>
 8004498:	3001      	adds	r0, #1
 800449a:	d1f2      	bne.n	8004482 <sbrk_aligned+0x22>
 800449c:	e7ef      	b.n	800447e <sbrk_aligned+0x1e>
 800449e:	bf00      	nop
 80044a0:	240002a4 	.word	0x240002a4

080044a4 <_malloc_r>:
 80044a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a8:	1ccd      	adds	r5, r1, #3
 80044aa:	f025 0503 	bic.w	r5, r5, #3
 80044ae:	3508      	adds	r5, #8
 80044b0:	2d0c      	cmp	r5, #12
 80044b2:	bf38      	it	cc
 80044b4:	250c      	movcc	r5, #12
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	4606      	mov	r6, r0
 80044ba:	db01      	blt.n	80044c0 <_malloc_r+0x1c>
 80044bc:	42a9      	cmp	r1, r5
 80044be:	d904      	bls.n	80044ca <_malloc_r+0x26>
 80044c0:	230c      	movs	r3, #12
 80044c2:	6033      	str	r3, [r6, #0]
 80044c4:	2000      	movs	r0, #0
 80044c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045a0 <_malloc_r+0xfc>
 80044ce:	f000 f869 	bl	80045a4 <__malloc_lock>
 80044d2:	f8d8 3000 	ldr.w	r3, [r8]
 80044d6:	461c      	mov	r4, r3
 80044d8:	bb44      	cbnz	r4, 800452c <_malloc_r+0x88>
 80044da:	4629      	mov	r1, r5
 80044dc:	4630      	mov	r0, r6
 80044de:	f7ff ffbf 	bl	8004460 <sbrk_aligned>
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	4604      	mov	r4, r0
 80044e6:	d158      	bne.n	800459a <_malloc_r+0xf6>
 80044e8:	f8d8 4000 	ldr.w	r4, [r8]
 80044ec:	4627      	mov	r7, r4
 80044ee:	2f00      	cmp	r7, #0
 80044f0:	d143      	bne.n	800457a <_malloc_r+0xd6>
 80044f2:	2c00      	cmp	r4, #0
 80044f4:	d04b      	beq.n	800458e <_malloc_r+0xea>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	4639      	mov	r1, r7
 80044fa:	4630      	mov	r0, r6
 80044fc:	eb04 0903 	add.w	r9, r4, r3
 8004500:	f000 fc6a 	bl	8004dd8 <_sbrk_r>
 8004504:	4581      	cmp	r9, r0
 8004506:	d142      	bne.n	800458e <_malloc_r+0xea>
 8004508:	6821      	ldr	r1, [r4, #0]
 800450a:	1a6d      	subs	r5, r5, r1
 800450c:	4629      	mov	r1, r5
 800450e:	4630      	mov	r0, r6
 8004510:	f7ff ffa6 	bl	8004460 <sbrk_aligned>
 8004514:	3001      	adds	r0, #1
 8004516:	d03a      	beq.n	800458e <_malloc_r+0xea>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	442b      	add	r3, r5
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	f8d8 3000 	ldr.w	r3, [r8]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	bb62      	cbnz	r2, 8004580 <_malloc_r+0xdc>
 8004526:	f8c8 7000 	str.w	r7, [r8]
 800452a:	e00f      	b.n	800454c <_malloc_r+0xa8>
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	1b52      	subs	r2, r2, r5
 8004530:	d420      	bmi.n	8004574 <_malloc_r+0xd0>
 8004532:	2a0b      	cmp	r2, #11
 8004534:	d917      	bls.n	8004566 <_malloc_r+0xc2>
 8004536:	1961      	adds	r1, r4, r5
 8004538:	42a3      	cmp	r3, r4
 800453a:	6025      	str	r5, [r4, #0]
 800453c:	bf18      	it	ne
 800453e:	6059      	strne	r1, [r3, #4]
 8004540:	6863      	ldr	r3, [r4, #4]
 8004542:	bf08      	it	eq
 8004544:	f8c8 1000 	streq.w	r1, [r8]
 8004548:	5162      	str	r2, [r4, r5]
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	4630      	mov	r0, r6
 800454e:	f000 f82f 	bl	80045b0 <__malloc_unlock>
 8004552:	f104 000b 	add.w	r0, r4, #11
 8004556:	1d23      	adds	r3, r4, #4
 8004558:	f020 0007 	bic.w	r0, r0, #7
 800455c:	1ac2      	subs	r2, r0, r3
 800455e:	bf1c      	itt	ne
 8004560:	1a1b      	subne	r3, r3, r0
 8004562:	50a3      	strne	r3, [r4, r2]
 8004564:	e7af      	b.n	80044c6 <_malloc_r+0x22>
 8004566:	6862      	ldr	r2, [r4, #4]
 8004568:	42a3      	cmp	r3, r4
 800456a:	bf0c      	ite	eq
 800456c:	f8c8 2000 	streq.w	r2, [r8]
 8004570:	605a      	strne	r2, [r3, #4]
 8004572:	e7eb      	b.n	800454c <_malloc_r+0xa8>
 8004574:	4623      	mov	r3, r4
 8004576:	6864      	ldr	r4, [r4, #4]
 8004578:	e7ae      	b.n	80044d8 <_malloc_r+0x34>
 800457a:	463c      	mov	r4, r7
 800457c:	687f      	ldr	r7, [r7, #4]
 800457e:	e7b6      	b.n	80044ee <_malloc_r+0x4a>
 8004580:	461a      	mov	r2, r3
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	42a3      	cmp	r3, r4
 8004586:	d1fb      	bne.n	8004580 <_malloc_r+0xdc>
 8004588:	2300      	movs	r3, #0
 800458a:	6053      	str	r3, [r2, #4]
 800458c:	e7de      	b.n	800454c <_malloc_r+0xa8>
 800458e:	230c      	movs	r3, #12
 8004590:	6033      	str	r3, [r6, #0]
 8004592:	4630      	mov	r0, r6
 8004594:	f000 f80c 	bl	80045b0 <__malloc_unlock>
 8004598:	e794      	b.n	80044c4 <_malloc_r+0x20>
 800459a:	6005      	str	r5, [r0, #0]
 800459c:	e7d6      	b.n	800454c <_malloc_r+0xa8>
 800459e:	bf00      	nop
 80045a0:	240002a8 	.word	0x240002a8

080045a4 <__malloc_lock>:
 80045a4:	4801      	ldr	r0, [pc, #4]	@ (80045ac <__malloc_lock+0x8>)
 80045a6:	f7ff bf0e 	b.w	80043c6 <__retarget_lock_acquire_recursive>
 80045aa:	bf00      	nop
 80045ac:	240002a0 	.word	0x240002a0

080045b0 <__malloc_unlock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <__malloc_unlock+0x8>)
 80045b2:	f7ff bf09 	b.w	80043c8 <__retarget_lock_release_recursive>
 80045b6:	bf00      	nop
 80045b8:	240002a0 	.word	0x240002a0

080045bc <__sfputc_r>:
 80045bc:	6893      	ldr	r3, [r2, #8]
 80045be:	3b01      	subs	r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	b410      	push	{r4}
 80045c4:	6093      	str	r3, [r2, #8]
 80045c6:	da08      	bge.n	80045da <__sfputc_r+0x1e>
 80045c8:	6994      	ldr	r4, [r2, #24]
 80045ca:	42a3      	cmp	r3, r4
 80045cc:	db01      	blt.n	80045d2 <__sfputc_r+0x16>
 80045ce:	290a      	cmp	r1, #10
 80045d0:	d103      	bne.n	80045da <__sfputc_r+0x1e>
 80045d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045d6:	f000 bb6b 	b.w	8004cb0 <__swbuf_r>
 80045da:	6813      	ldr	r3, [r2, #0]
 80045dc:	1c58      	adds	r0, r3, #1
 80045de:	6010      	str	r0, [r2, #0]
 80045e0:	7019      	strb	r1, [r3, #0]
 80045e2:	4608      	mov	r0, r1
 80045e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <__sfputs_r>:
 80045ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ec:	4606      	mov	r6, r0
 80045ee:	460f      	mov	r7, r1
 80045f0:	4614      	mov	r4, r2
 80045f2:	18d5      	adds	r5, r2, r3
 80045f4:	42ac      	cmp	r4, r5
 80045f6:	d101      	bne.n	80045fc <__sfputs_r+0x12>
 80045f8:	2000      	movs	r0, #0
 80045fa:	e007      	b.n	800460c <__sfputs_r+0x22>
 80045fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004600:	463a      	mov	r2, r7
 8004602:	4630      	mov	r0, r6
 8004604:	f7ff ffda 	bl	80045bc <__sfputc_r>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d1f3      	bne.n	80045f4 <__sfputs_r+0xa>
 800460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004610 <_vfiprintf_r>:
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	460d      	mov	r5, r1
 8004616:	b09d      	sub	sp, #116	@ 0x74
 8004618:	4614      	mov	r4, r2
 800461a:	4698      	mov	r8, r3
 800461c:	4606      	mov	r6, r0
 800461e:	b118      	cbz	r0, 8004628 <_vfiprintf_r+0x18>
 8004620:	6a03      	ldr	r3, [r0, #32]
 8004622:	b90b      	cbnz	r3, 8004628 <_vfiprintf_r+0x18>
 8004624:	f7ff fdca 	bl	80041bc <__sinit>
 8004628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800462a:	07d9      	lsls	r1, r3, #31
 800462c:	d405      	bmi.n	800463a <_vfiprintf_r+0x2a>
 800462e:	89ab      	ldrh	r3, [r5, #12]
 8004630:	059a      	lsls	r2, r3, #22
 8004632:	d402      	bmi.n	800463a <_vfiprintf_r+0x2a>
 8004634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004636:	f7ff fec6 	bl	80043c6 <__retarget_lock_acquire_recursive>
 800463a:	89ab      	ldrh	r3, [r5, #12]
 800463c:	071b      	lsls	r3, r3, #28
 800463e:	d501      	bpl.n	8004644 <_vfiprintf_r+0x34>
 8004640:	692b      	ldr	r3, [r5, #16]
 8004642:	b99b      	cbnz	r3, 800466c <_vfiprintf_r+0x5c>
 8004644:	4629      	mov	r1, r5
 8004646:	4630      	mov	r0, r6
 8004648:	f000 fb70 	bl	8004d2c <__swsetup_r>
 800464c:	b170      	cbz	r0, 800466c <_vfiprintf_r+0x5c>
 800464e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004650:	07dc      	lsls	r4, r3, #31
 8004652:	d504      	bpl.n	800465e <_vfiprintf_r+0x4e>
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	b01d      	add	sp, #116	@ 0x74
 800465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465e:	89ab      	ldrh	r3, [r5, #12]
 8004660:	0598      	lsls	r0, r3, #22
 8004662:	d4f7      	bmi.n	8004654 <_vfiprintf_r+0x44>
 8004664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004666:	f7ff feaf 	bl	80043c8 <__retarget_lock_release_recursive>
 800466a:	e7f3      	b.n	8004654 <_vfiprintf_r+0x44>
 800466c:	2300      	movs	r3, #0
 800466e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004670:	2320      	movs	r3, #32
 8004672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004676:	f8cd 800c 	str.w	r8, [sp, #12]
 800467a:	2330      	movs	r3, #48	@ 0x30
 800467c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800482c <_vfiprintf_r+0x21c>
 8004680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004684:	f04f 0901 	mov.w	r9, #1
 8004688:	4623      	mov	r3, r4
 800468a:	469a      	mov	sl, r3
 800468c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004690:	b10a      	cbz	r2, 8004696 <_vfiprintf_r+0x86>
 8004692:	2a25      	cmp	r2, #37	@ 0x25
 8004694:	d1f9      	bne.n	800468a <_vfiprintf_r+0x7a>
 8004696:	ebba 0b04 	subs.w	fp, sl, r4
 800469a:	d00b      	beq.n	80046b4 <_vfiprintf_r+0xa4>
 800469c:	465b      	mov	r3, fp
 800469e:	4622      	mov	r2, r4
 80046a0:	4629      	mov	r1, r5
 80046a2:	4630      	mov	r0, r6
 80046a4:	f7ff ffa1 	bl	80045ea <__sfputs_r>
 80046a8:	3001      	adds	r0, #1
 80046aa:	f000 80a7 	beq.w	80047fc <_vfiprintf_r+0x1ec>
 80046ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046b0:	445a      	add	r2, fp
 80046b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80046b4:	f89a 3000 	ldrb.w	r3, [sl]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 809f 	beq.w	80047fc <_vfiprintf_r+0x1ec>
 80046be:	2300      	movs	r3, #0
 80046c0:	f04f 32ff 	mov.w	r2, #4294967295
 80046c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c8:	f10a 0a01 	add.w	sl, sl, #1
 80046cc:	9304      	str	r3, [sp, #16]
 80046ce:	9307      	str	r3, [sp, #28]
 80046d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80046d6:	4654      	mov	r4, sl
 80046d8:	2205      	movs	r2, #5
 80046da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046de:	4853      	ldr	r0, [pc, #332]	@ (800482c <_vfiprintf_r+0x21c>)
 80046e0:	f7fb fdfe 	bl	80002e0 <memchr>
 80046e4:	9a04      	ldr	r2, [sp, #16]
 80046e6:	b9d8      	cbnz	r0, 8004720 <_vfiprintf_r+0x110>
 80046e8:	06d1      	lsls	r1, r2, #27
 80046ea:	bf44      	itt	mi
 80046ec:	2320      	movmi	r3, #32
 80046ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046f2:	0713      	lsls	r3, r2, #28
 80046f4:	bf44      	itt	mi
 80046f6:	232b      	movmi	r3, #43	@ 0x2b
 80046f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004700:	2b2a      	cmp	r3, #42	@ 0x2a
 8004702:	d015      	beq.n	8004730 <_vfiprintf_r+0x120>
 8004704:	9a07      	ldr	r2, [sp, #28]
 8004706:	4654      	mov	r4, sl
 8004708:	2000      	movs	r0, #0
 800470a:	f04f 0c0a 	mov.w	ip, #10
 800470e:	4621      	mov	r1, r4
 8004710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004714:	3b30      	subs	r3, #48	@ 0x30
 8004716:	2b09      	cmp	r3, #9
 8004718:	d94b      	bls.n	80047b2 <_vfiprintf_r+0x1a2>
 800471a:	b1b0      	cbz	r0, 800474a <_vfiprintf_r+0x13a>
 800471c:	9207      	str	r2, [sp, #28]
 800471e:	e014      	b.n	800474a <_vfiprintf_r+0x13a>
 8004720:	eba0 0308 	sub.w	r3, r0, r8
 8004724:	fa09 f303 	lsl.w	r3, r9, r3
 8004728:	4313      	orrs	r3, r2
 800472a:	9304      	str	r3, [sp, #16]
 800472c:	46a2      	mov	sl, r4
 800472e:	e7d2      	b.n	80046d6 <_vfiprintf_r+0xc6>
 8004730:	9b03      	ldr	r3, [sp, #12]
 8004732:	1d19      	adds	r1, r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	9103      	str	r1, [sp, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	bfbb      	ittet	lt
 800473c:	425b      	neglt	r3, r3
 800473e:	f042 0202 	orrlt.w	r2, r2, #2
 8004742:	9307      	strge	r3, [sp, #28]
 8004744:	9307      	strlt	r3, [sp, #28]
 8004746:	bfb8      	it	lt
 8004748:	9204      	strlt	r2, [sp, #16]
 800474a:	7823      	ldrb	r3, [r4, #0]
 800474c:	2b2e      	cmp	r3, #46	@ 0x2e
 800474e:	d10a      	bne.n	8004766 <_vfiprintf_r+0x156>
 8004750:	7863      	ldrb	r3, [r4, #1]
 8004752:	2b2a      	cmp	r3, #42	@ 0x2a
 8004754:	d132      	bne.n	80047bc <_vfiprintf_r+0x1ac>
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	1d1a      	adds	r2, r3, #4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	9203      	str	r2, [sp, #12]
 800475e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004762:	3402      	adds	r4, #2
 8004764:	9305      	str	r3, [sp, #20]
 8004766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800483c <_vfiprintf_r+0x22c>
 800476a:	7821      	ldrb	r1, [r4, #0]
 800476c:	2203      	movs	r2, #3
 800476e:	4650      	mov	r0, sl
 8004770:	f7fb fdb6 	bl	80002e0 <memchr>
 8004774:	b138      	cbz	r0, 8004786 <_vfiprintf_r+0x176>
 8004776:	9b04      	ldr	r3, [sp, #16]
 8004778:	eba0 000a 	sub.w	r0, r0, sl
 800477c:	2240      	movs	r2, #64	@ 0x40
 800477e:	4082      	lsls	r2, r0
 8004780:	4313      	orrs	r3, r2
 8004782:	3401      	adds	r4, #1
 8004784:	9304      	str	r3, [sp, #16]
 8004786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478a:	4829      	ldr	r0, [pc, #164]	@ (8004830 <_vfiprintf_r+0x220>)
 800478c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004790:	2206      	movs	r2, #6
 8004792:	f7fb fda5 	bl	80002e0 <memchr>
 8004796:	2800      	cmp	r0, #0
 8004798:	d03f      	beq.n	800481a <_vfiprintf_r+0x20a>
 800479a:	4b26      	ldr	r3, [pc, #152]	@ (8004834 <_vfiprintf_r+0x224>)
 800479c:	bb1b      	cbnz	r3, 80047e6 <_vfiprintf_r+0x1d6>
 800479e:	9b03      	ldr	r3, [sp, #12]
 80047a0:	3307      	adds	r3, #7
 80047a2:	f023 0307 	bic.w	r3, r3, #7
 80047a6:	3308      	adds	r3, #8
 80047a8:	9303      	str	r3, [sp, #12]
 80047aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ac:	443b      	add	r3, r7
 80047ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80047b0:	e76a      	b.n	8004688 <_vfiprintf_r+0x78>
 80047b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b6:	460c      	mov	r4, r1
 80047b8:	2001      	movs	r0, #1
 80047ba:	e7a8      	b.n	800470e <_vfiprintf_r+0xfe>
 80047bc:	2300      	movs	r3, #0
 80047be:	3401      	adds	r4, #1
 80047c0:	9305      	str	r3, [sp, #20]
 80047c2:	4619      	mov	r1, r3
 80047c4:	f04f 0c0a 	mov.w	ip, #10
 80047c8:	4620      	mov	r0, r4
 80047ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ce:	3a30      	subs	r2, #48	@ 0x30
 80047d0:	2a09      	cmp	r2, #9
 80047d2:	d903      	bls.n	80047dc <_vfiprintf_r+0x1cc>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0c6      	beq.n	8004766 <_vfiprintf_r+0x156>
 80047d8:	9105      	str	r1, [sp, #20]
 80047da:	e7c4      	b.n	8004766 <_vfiprintf_r+0x156>
 80047dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80047e0:	4604      	mov	r4, r0
 80047e2:	2301      	movs	r3, #1
 80047e4:	e7f0      	b.n	80047c8 <_vfiprintf_r+0x1b8>
 80047e6:	ab03      	add	r3, sp, #12
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	462a      	mov	r2, r5
 80047ec:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <_vfiprintf_r+0x228>)
 80047ee:	a904      	add	r1, sp, #16
 80047f0:	4630      	mov	r0, r6
 80047f2:	f3af 8000 	nop.w
 80047f6:	4607      	mov	r7, r0
 80047f8:	1c78      	adds	r0, r7, #1
 80047fa:	d1d6      	bne.n	80047aa <_vfiprintf_r+0x19a>
 80047fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047fe:	07d9      	lsls	r1, r3, #31
 8004800:	d405      	bmi.n	800480e <_vfiprintf_r+0x1fe>
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	059a      	lsls	r2, r3, #22
 8004806:	d402      	bmi.n	800480e <_vfiprintf_r+0x1fe>
 8004808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800480a:	f7ff fddd 	bl	80043c8 <__retarget_lock_release_recursive>
 800480e:	89ab      	ldrh	r3, [r5, #12]
 8004810:	065b      	lsls	r3, r3, #25
 8004812:	f53f af1f 	bmi.w	8004654 <_vfiprintf_r+0x44>
 8004816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004818:	e71e      	b.n	8004658 <_vfiprintf_r+0x48>
 800481a:	ab03      	add	r3, sp, #12
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	462a      	mov	r2, r5
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <_vfiprintf_r+0x228>)
 8004822:	a904      	add	r1, sp, #16
 8004824:	4630      	mov	r0, r6
 8004826:	f000 f879 	bl	800491c <_printf_i>
 800482a:	e7e4      	b.n	80047f6 <_vfiprintf_r+0x1e6>
 800482c:	08004f68 	.word	0x08004f68
 8004830:	08004f72 	.word	0x08004f72
 8004834:	00000000 	.word	0x00000000
 8004838:	080045eb 	.word	0x080045eb
 800483c:	08004f6e 	.word	0x08004f6e

08004840 <_printf_common>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	4616      	mov	r6, r2
 8004846:	4698      	mov	r8, r3
 8004848:	688a      	ldr	r2, [r1, #8]
 800484a:	690b      	ldr	r3, [r1, #16]
 800484c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004850:	4293      	cmp	r3, r2
 8004852:	bfb8      	it	lt
 8004854:	4613      	movlt	r3, r2
 8004856:	6033      	str	r3, [r6, #0]
 8004858:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800485c:	4607      	mov	r7, r0
 800485e:	460c      	mov	r4, r1
 8004860:	b10a      	cbz	r2, 8004866 <_printf_common+0x26>
 8004862:	3301      	adds	r3, #1
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	0699      	lsls	r1, r3, #26
 800486a:	bf42      	ittt	mi
 800486c:	6833      	ldrmi	r3, [r6, #0]
 800486e:	3302      	addmi	r3, #2
 8004870:	6033      	strmi	r3, [r6, #0]
 8004872:	6825      	ldr	r5, [r4, #0]
 8004874:	f015 0506 	ands.w	r5, r5, #6
 8004878:	d106      	bne.n	8004888 <_printf_common+0x48>
 800487a:	f104 0a19 	add.w	sl, r4, #25
 800487e:	68e3      	ldr	r3, [r4, #12]
 8004880:	6832      	ldr	r2, [r6, #0]
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	42ab      	cmp	r3, r5
 8004886:	dc26      	bgt.n	80048d6 <_printf_common+0x96>
 8004888:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	3b00      	subs	r3, #0
 8004890:	bf18      	it	ne
 8004892:	2301      	movne	r3, #1
 8004894:	0692      	lsls	r2, r2, #26
 8004896:	d42b      	bmi.n	80048f0 <_printf_common+0xb0>
 8004898:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800489c:	4641      	mov	r1, r8
 800489e:	4638      	mov	r0, r7
 80048a0:	47c8      	blx	r9
 80048a2:	3001      	adds	r0, #1
 80048a4:	d01e      	beq.n	80048e4 <_printf_common+0xa4>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	6922      	ldr	r2, [r4, #16]
 80048aa:	f003 0306 	and.w	r3, r3, #6
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	bf02      	ittt	eq
 80048b2:	68e5      	ldreq	r5, [r4, #12]
 80048b4:	6833      	ldreq	r3, [r6, #0]
 80048b6:	1aed      	subeq	r5, r5, r3
 80048b8:	68a3      	ldr	r3, [r4, #8]
 80048ba:	bf0c      	ite	eq
 80048bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c0:	2500      	movne	r5, #0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bfc4      	itt	gt
 80048c6:	1a9b      	subgt	r3, r3, r2
 80048c8:	18ed      	addgt	r5, r5, r3
 80048ca:	2600      	movs	r6, #0
 80048cc:	341a      	adds	r4, #26
 80048ce:	42b5      	cmp	r5, r6
 80048d0:	d11a      	bne.n	8004908 <_printf_common+0xc8>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e008      	b.n	80048e8 <_printf_common+0xa8>
 80048d6:	2301      	movs	r3, #1
 80048d8:	4652      	mov	r2, sl
 80048da:	4641      	mov	r1, r8
 80048dc:	4638      	mov	r0, r7
 80048de:	47c8      	blx	r9
 80048e0:	3001      	adds	r0, #1
 80048e2:	d103      	bne.n	80048ec <_printf_common+0xac>
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ec:	3501      	adds	r5, #1
 80048ee:	e7c6      	b.n	800487e <_printf_common+0x3e>
 80048f0:	18e1      	adds	r1, r4, r3
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	2030      	movs	r0, #48	@ 0x30
 80048f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048fa:	4422      	add	r2, r4
 80048fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004900:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004904:	3302      	adds	r3, #2
 8004906:	e7c7      	b.n	8004898 <_printf_common+0x58>
 8004908:	2301      	movs	r3, #1
 800490a:	4622      	mov	r2, r4
 800490c:	4641      	mov	r1, r8
 800490e:	4638      	mov	r0, r7
 8004910:	47c8      	blx	r9
 8004912:	3001      	adds	r0, #1
 8004914:	d0e6      	beq.n	80048e4 <_printf_common+0xa4>
 8004916:	3601      	adds	r6, #1
 8004918:	e7d9      	b.n	80048ce <_printf_common+0x8e>
	...

0800491c <_printf_i>:
 800491c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004920:	7e0f      	ldrb	r7, [r1, #24]
 8004922:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004924:	2f78      	cmp	r7, #120	@ 0x78
 8004926:	4691      	mov	r9, r2
 8004928:	4680      	mov	r8, r0
 800492a:	460c      	mov	r4, r1
 800492c:	469a      	mov	sl, r3
 800492e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004932:	d807      	bhi.n	8004944 <_printf_i+0x28>
 8004934:	2f62      	cmp	r7, #98	@ 0x62
 8004936:	d80a      	bhi.n	800494e <_printf_i+0x32>
 8004938:	2f00      	cmp	r7, #0
 800493a:	f000 80d1 	beq.w	8004ae0 <_printf_i+0x1c4>
 800493e:	2f58      	cmp	r7, #88	@ 0x58
 8004940:	f000 80b8 	beq.w	8004ab4 <_printf_i+0x198>
 8004944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004948:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800494c:	e03a      	b.n	80049c4 <_printf_i+0xa8>
 800494e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004952:	2b15      	cmp	r3, #21
 8004954:	d8f6      	bhi.n	8004944 <_printf_i+0x28>
 8004956:	a101      	add	r1, pc, #4	@ (adr r1, 800495c <_printf_i+0x40>)
 8004958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800495c:	080049b5 	.word	0x080049b5
 8004960:	080049c9 	.word	0x080049c9
 8004964:	08004945 	.word	0x08004945
 8004968:	08004945 	.word	0x08004945
 800496c:	08004945 	.word	0x08004945
 8004970:	08004945 	.word	0x08004945
 8004974:	080049c9 	.word	0x080049c9
 8004978:	08004945 	.word	0x08004945
 800497c:	08004945 	.word	0x08004945
 8004980:	08004945 	.word	0x08004945
 8004984:	08004945 	.word	0x08004945
 8004988:	08004ac7 	.word	0x08004ac7
 800498c:	080049f3 	.word	0x080049f3
 8004990:	08004a81 	.word	0x08004a81
 8004994:	08004945 	.word	0x08004945
 8004998:	08004945 	.word	0x08004945
 800499c:	08004ae9 	.word	0x08004ae9
 80049a0:	08004945 	.word	0x08004945
 80049a4:	080049f3 	.word	0x080049f3
 80049a8:	08004945 	.word	0x08004945
 80049ac:	08004945 	.word	0x08004945
 80049b0:	08004a89 	.word	0x08004a89
 80049b4:	6833      	ldr	r3, [r6, #0]
 80049b6:	1d1a      	adds	r2, r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6032      	str	r2, [r6, #0]
 80049bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049c4:	2301      	movs	r3, #1
 80049c6:	e09c      	b.n	8004b02 <_printf_i+0x1e6>
 80049c8:	6833      	ldr	r3, [r6, #0]
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	1d19      	adds	r1, r3, #4
 80049ce:	6031      	str	r1, [r6, #0]
 80049d0:	0606      	lsls	r6, r0, #24
 80049d2:	d501      	bpl.n	80049d8 <_printf_i+0xbc>
 80049d4:	681d      	ldr	r5, [r3, #0]
 80049d6:	e003      	b.n	80049e0 <_printf_i+0xc4>
 80049d8:	0645      	lsls	r5, r0, #25
 80049da:	d5fb      	bpl.n	80049d4 <_printf_i+0xb8>
 80049dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	da03      	bge.n	80049ec <_printf_i+0xd0>
 80049e4:	232d      	movs	r3, #45	@ 0x2d
 80049e6:	426d      	negs	r5, r5
 80049e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ec:	4858      	ldr	r0, [pc, #352]	@ (8004b50 <_printf_i+0x234>)
 80049ee:	230a      	movs	r3, #10
 80049f0:	e011      	b.n	8004a16 <_printf_i+0xfa>
 80049f2:	6821      	ldr	r1, [r4, #0]
 80049f4:	6833      	ldr	r3, [r6, #0]
 80049f6:	0608      	lsls	r0, r1, #24
 80049f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80049fc:	d402      	bmi.n	8004a04 <_printf_i+0xe8>
 80049fe:	0649      	lsls	r1, r1, #25
 8004a00:	bf48      	it	mi
 8004a02:	b2ad      	uxthmi	r5, r5
 8004a04:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a06:	4852      	ldr	r0, [pc, #328]	@ (8004b50 <_printf_i+0x234>)
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	bf14      	ite	ne
 8004a0c:	230a      	movne	r3, #10
 8004a0e:	2308      	moveq	r3, #8
 8004a10:	2100      	movs	r1, #0
 8004a12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a16:	6866      	ldr	r6, [r4, #4]
 8004a18:	60a6      	str	r6, [r4, #8]
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	db05      	blt.n	8004a2a <_printf_i+0x10e>
 8004a1e:	6821      	ldr	r1, [r4, #0]
 8004a20:	432e      	orrs	r6, r5
 8004a22:	f021 0104 	bic.w	r1, r1, #4
 8004a26:	6021      	str	r1, [r4, #0]
 8004a28:	d04b      	beq.n	8004ac2 <_printf_i+0x1a6>
 8004a2a:	4616      	mov	r6, r2
 8004a2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a30:	fb03 5711 	mls	r7, r3, r1, r5
 8004a34:	5dc7      	ldrb	r7, [r0, r7]
 8004a36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a3a:	462f      	mov	r7, r5
 8004a3c:	42bb      	cmp	r3, r7
 8004a3e:	460d      	mov	r5, r1
 8004a40:	d9f4      	bls.n	8004a2c <_printf_i+0x110>
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d10b      	bne.n	8004a5e <_printf_i+0x142>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	07df      	lsls	r7, r3, #31
 8004a4a:	d508      	bpl.n	8004a5e <_printf_i+0x142>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	6861      	ldr	r1, [r4, #4]
 8004a50:	4299      	cmp	r1, r3
 8004a52:	bfde      	ittt	le
 8004a54:	2330      	movle	r3, #48	@ 0x30
 8004a56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a5e:	1b92      	subs	r2, r2, r6
 8004a60:	6122      	str	r2, [r4, #16]
 8004a62:	f8cd a000 	str.w	sl, [sp]
 8004a66:	464b      	mov	r3, r9
 8004a68:	aa03      	add	r2, sp, #12
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	f7ff fee7 	bl	8004840 <_printf_common>
 8004a72:	3001      	adds	r0, #1
 8004a74:	d14a      	bne.n	8004b0c <_printf_i+0x1f0>
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	b004      	add	sp, #16
 8004a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	f043 0320 	orr.w	r3, r3, #32
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	4832      	ldr	r0, [pc, #200]	@ (8004b54 <_printf_i+0x238>)
 8004a8a:	2778      	movs	r7, #120	@ 0x78
 8004a8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	6831      	ldr	r1, [r6, #0]
 8004a94:	061f      	lsls	r7, r3, #24
 8004a96:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a9a:	d402      	bmi.n	8004aa2 <_printf_i+0x186>
 8004a9c:	065f      	lsls	r7, r3, #25
 8004a9e:	bf48      	it	mi
 8004aa0:	b2ad      	uxthmi	r5, r5
 8004aa2:	6031      	str	r1, [r6, #0]
 8004aa4:	07d9      	lsls	r1, r3, #31
 8004aa6:	bf44      	itt	mi
 8004aa8:	f043 0320 	orrmi.w	r3, r3, #32
 8004aac:	6023      	strmi	r3, [r4, #0]
 8004aae:	b11d      	cbz	r5, 8004ab8 <_printf_i+0x19c>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	e7ad      	b.n	8004a10 <_printf_i+0xf4>
 8004ab4:	4826      	ldr	r0, [pc, #152]	@ (8004b50 <_printf_i+0x234>)
 8004ab6:	e7e9      	b.n	8004a8c <_printf_i+0x170>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	f023 0320 	bic.w	r3, r3, #32
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	e7f6      	b.n	8004ab0 <_printf_i+0x194>
 8004ac2:	4616      	mov	r6, r2
 8004ac4:	e7bd      	b.n	8004a42 <_printf_i+0x126>
 8004ac6:	6833      	ldr	r3, [r6, #0]
 8004ac8:	6825      	ldr	r5, [r4, #0]
 8004aca:	6961      	ldr	r1, [r4, #20]
 8004acc:	1d18      	adds	r0, r3, #4
 8004ace:	6030      	str	r0, [r6, #0]
 8004ad0:	062e      	lsls	r6, r5, #24
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	d501      	bpl.n	8004ada <_printf_i+0x1be>
 8004ad6:	6019      	str	r1, [r3, #0]
 8004ad8:	e002      	b.n	8004ae0 <_printf_i+0x1c4>
 8004ada:	0668      	lsls	r0, r5, #25
 8004adc:	d5fb      	bpl.n	8004ad6 <_printf_i+0x1ba>
 8004ade:	8019      	strh	r1, [r3, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6123      	str	r3, [r4, #16]
 8004ae4:	4616      	mov	r6, r2
 8004ae6:	e7bc      	b.n	8004a62 <_printf_i+0x146>
 8004ae8:	6833      	ldr	r3, [r6, #0]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	6032      	str	r2, [r6, #0]
 8004aee:	681e      	ldr	r6, [r3, #0]
 8004af0:	6862      	ldr	r2, [r4, #4]
 8004af2:	2100      	movs	r1, #0
 8004af4:	4630      	mov	r0, r6
 8004af6:	f7fb fbf3 	bl	80002e0 <memchr>
 8004afa:	b108      	cbz	r0, 8004b00 <_printf_i+0x1e4>
 8004afc:	1b80      	subs	r0, r0, r6
 8004afe:	6060      	str	r0, [r4, #4]
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	2300      	movs	r3, #0
 8004b06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b0a:	e7aa      	b.n	8004a62 <_printf_i+0x146>
 8004b0c:	6923      	ldr	r3, [r4, #16]
 8004b0e:	4632      	mov	r2, r6
 8004b10:	4649      	mov	r1, r9
 8004b12:	4640      	mov	r0, r8
 8004b14:	47d0      	blx	sl
 8004b16:	3001      	adds	r0, #1
 8004b18:	d0ad      	beq.n	8004a76 <_printf_i+0x15a>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	079b      	lsls	r3, r3, #30
 8004b1e:	d413      	bmi.n	8004b48 <_printf_i+0x22c>
 8004b20:	68e0      	ldr	r0, [r4, #12]
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	4298      	cmp	r0, r3
 8004b26:	bfb8      	it	lt
 8004b28:	4618      	movlt	r0, r3
 8004b2a:	e7a6      	b.n	8004a7a <_printf_i+0x15e>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4632      	mov	r2, r6
 8004b30:	4649      	mov	r1, r9
 8004b32:	4640      	mov	r0, r8
 8004b34:	47d0      	blx	sl
 8004b36:	3001      	adds	r0, #1
 8004b38:	d09d      	beq.n	8004a76 <_printf_i+0x15a>
 8004b3a:	3501      	adds	r5, #1
 8004b3c:	68e3      	ldr	r3, [r4, #12]
 8004b3e:	9903      	ldr	r1, [sp, #12]
 8004b40:	1a5b      	subs	r3, r3, r1
 8004b42:	42ab      	cmp	r3, r5
 8004b44:	dcf2      	bgt.n	8004b2c <_printf_i+0x210>
 8004b46:	e7eb      	b.n	8004b20 <_printf_i+0x204>
 8004b48:	2500      	movs	r5, #0
 8004b4a:	f104 0619 	add.w	r6, r4, #25
 8004b4e:	e7f5      	b.n	8004b3c <_printf_i+0x220>
 8004b50:	08004f79 	.word	0x08004f79
 8004b54:	08004f8a 	.word	0x08004f8a

08004b58 <__sflush_r>:
 8004b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b60:	0716      	lsls	r6, r2, #28
 8004b62:	4605      	mov	r5, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	d454      	bmi.n	8004c12 <__sflush_r+0xba>
 8004b68:	684b      	ldr	r3, [r1, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dc02      	bgt.n	8004b74 <__sflush_r+0x1c>
 8004b6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dd48      	ble.n	8004c06 <__sflush_r+0xae>
 8004b74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	d045      	beq.n	8004c06 <__sflush_r+0xae>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b80:	682f      	ldr	r7, [r5, #0]
 8004b82:	6a21      	ldr	r1, [r4, #32]
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	d030      	beq.n	8004bea <__sflush_r+0x92>
 8004b88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	0759      	lsls	r1, r3, #29
 8004b8e:	d505      	bpl.n	8004b9c <__sflush_r+0x44>
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	1ad2      	subs	r2, r2, r3
 8004b94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b96:	b10b      	cbz	r3, 8004b9c <__sflush_r+0x44>
 8004b98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ba0:	6a21      	ldr	r1, [r4, #32]
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b0      	blx	r6
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	d106      	bne.n	8004bba <__sflush_r+0x62>
 8004bac:	6829      	ldr	r1, [r5, #0]
 8004bae:	291d      	cmp	r1, #29
 8004bb0:	d82b      	bhi.n	8004c0a <__sflush_r+0xb2>
 8004bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c5c <__sflush_r+0x104>)
 8004bb4:	40ca      	lsrs	r2, r1
 8004bb6:	07d6      	lsls	r6, r2, #31
 8004bb8:	d527      	bpl.n	8004c0a <__sflush_r+0xb2>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	6062      	str	r2, [r4, #4]
 8004bbe:	04d9      	lsls	r1, r3, #19
 8004bc0:	6922      	ldr	r2, [r4, #16]
 8004bc2:	6022      	str	r2, [r4, #0]
 8004bc4:	d504      	bpl.n	8004bd0 <__sflush_r+0x78>
 8004bc6:	1c42      	adds	r2, r0, #1
 8004bc8:	d101      	bne.n	8004bce <__sflush_r+0x76>
 8004bca:	682b      	ldr	r3, [r5, #0]
 8004bcc:	b903      	cbnz	r3, 8004bd0 <__sflush_r+0x78>
 8004bce:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bd2:	602f      	str	r7, [r5, #0]
 8004bd4:	b1b9      	cbz	r1, 8004c06 <__sflush_r+0xae>
 8004bd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	d002      	beq.n	8004be4 <__sflush_r+0x8c>
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7ff fbf4 	bl	80043cc <_free_r>
 8004be4:	2300      	movs	r3, #0
 8004be6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004be8:	e00d      	b.n	8004c06 <__sflush_r+0xae>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b0      	blx	r6
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	1c50      	adds	r0, r2, #1
 8004bf4:	d1c9      	bne.n	8004b8a <__sflush_r+0x32>
 8004bf6:	682b      	ldr	r3, [r5, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0c6      	beq.n	8004b8a <__sflush_r+0x32>
 8004bfc:	2b1d      	cmp	r3, #29
 8004bfe:	d001      	beq.n	8004c04 <__sflush_r+0xac>
 8004c00:	2b16      	cmp	r3, #22
 8004c02:	d11e      	bne.n	8004c42 <__sflush_r+0xea>
 8004c04:	602f      	str	r7, [r5, #0]
 8004c06:	2000      	movs	r0, #0
 8004c08:	e022      	b.n	8004c50 <__sflush_r+0xf8>
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0e:	b21b      	sxth	r3, r3
 8004c10:	e01b      	b.n	8004c4a <__sflush_r+0xf2>
 8004c12:	690f      	ldr	r7, [r1, #16]
 8004c14:	2f00      	cmp	r7, #0
 8004c16:	d0f6      	beq.n	8004c06 <__sflush_r+0xae>
 8004c18:	0793      	lsls	r3, r2, #30
 8004c1a:	680e      	ldr	r6, [r1, #0]
 8004c1c:	bf08      	it	eq
 8004c1e:	694b      	ldreq	r3, [r1, #20]
 8004c20:	600f      	str	r7, [r1, #0]
 8004c22:	bf18      	it	ne
 8004c24:	2300      	movne	r3, #0
 8004c26:	eba6 0807 	sub.w	r8, r6, r7
 8004c2a:	608b      	str	r3, [r1, #8]
 8004c2c:	f1b8 0f00 	cmp.w	r8, #0
 8004c30:	dde9      	ble.n	8004c06 <__sflush_r+0xae>
 8004c32:	6a21      	ldr	r1, [r4, #32]
 8004c34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c36:	4643      	mov	r3, r8
 8004c38:	463a      	mov	r2, r7
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b0      	blx	r6
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	dc08      	bgt.n	8004c54 <__sflush_r+0xfc>
 8004c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c4a:	81a3      	strh	r3, [r4, #12]
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c54:	4407      	add	r7, r0
 8004c56:	eba8 0800 	sub.w	r8, r8, r0
 8004c5a:	e7e7      	b.n	8004c2c <__sflush_r+0xd4>
 8004c5c:	20400001 	.word	0x20400001

08004c60 <_fflush_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	690b      	ldr	r3, [r1, #16]
 8004c64:	4605      	mov	r5, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	b913      	cbnz	r3, 8004c70 <_fflush_r+0x10>
 8004c6a:	2500      	movs	r5, #0
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	b118      	cbz	r0, 8004c7a <_fflush_r+0x1a>
 8004c72:	6a03      	ldr	r3, [r0, #32]
 8004c74:	b90b      	cbnz	r3, 8004c7a <_fflush_r+0x1a>
 8004c76:	f7ff faa1 	bl	80041bc <__sinit>
 8004c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f3      	beq.n	8004c6a <_fflush_r+0xa>
 8004c82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c84:	07d0      	lsls	r0, r2, #31
 8004c86:	d404      	bmi.n	8004c92 <_fflush_r+0x32>
 8004c88:	0599      	lsls	r1, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_fflush_r+0x32>
 8004c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c8e:	f7ff fb9a 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8004c92:	4628      	mov	r0, r5
 8004c94:	4621      	mov	r1, r4
 8004c96:	f7ff ff5f 	bl	8004b58 <__sflush_r>
 8004c9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c9c:	07da      	lsls	r2, r3, #31
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	d4e4      	bmi.n	8004c6c <_fflush_r+0xc>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	059b      	lsls	r3, r3, #22
 8004ca6:	d4e1      	bmi.n	8004c6c <_fflush_r+0xc>
 8004ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004caa:	f7ff fb8d 	bl	80043c8 <__retarget_lock_release_recursive>
 8004cae:	e7dd      	b.n	8004c6c <_fflush_r+0xc>

08004cb0 <__swbuf_r>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	460e      	mov	r6, r1
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	b118      	cbz	r0, 8004cc2 <__swbuf_r+0x12>
 8004cba:	6a03      	ldr	r3, [r0, #32]
 8004cbc:	b90b      	cbnz	r3, 8004cc2 <__swbuf_r+0x12>
 8004cbe:	f7ff fa7d 	bl	80041bc <__sinit>
 8004cc2:	69a3      	ldr	r3, [r4, #24]
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	071a      	lsls	r2, r3, #28
 8004cca:	d501      	bpl.n	8004cd0 <__swbuf_r+0x20>
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	b943      	cbnz	r3, 8004ce2 <__swbuf_r+0x32>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 f82a 	bl	8004d2c <__swsetup_r>
 8004cd8:	b118      	cbz	r0, 8004ce2 <__swbuf_r+0x32>
 8004cda:	f04f 37ff 	mov.w	r7, #4294967295
 8004cde:	4638      	mov	r0, r7
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	6922      	ldr	r2, [r4, #16]
 8004ce6:	1a98      	subs	r0, r3, r2
 8004ce8:	6963      	ldr	r3, [r4, #20]
 8004cea:	b2f6      	uxtb	r6, r6
 8004cec:	4283      	cmp	r3, r0
 8004cee:	4637      	mov	r7, r6
 8004cf0:	dc05      	bgt.n	8004cfe <__swbuf_r+0x4e>
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f7ff ffb3 	bl	8004c60 <_fflush_r>
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d1ed      	bne.n	8004cda <__swbuf_r+0x2a>
 8004cfe:	68a3      	ldr	r3, [r4, #8]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	60a3      	str	r3, [r4, #8]
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	6022      	str	r2, [r4, #0]
 8004d0a:	701e      	strb	r6, [r3, #0]
 8004d0c:	6962      	ldr	r2, [r4, #20]
 8004d0e:	1c43      	adds	r3, r0, #1
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d004      	beq.n	8004d1e <__swbuf_r+0x6e>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	07db      	lsls	r3, r3, #31
 8004d18:	d5e1      	bpl.n	8004cde <__swbuf_r+0x2e>
 8004d1a:	2e0a      	cmp	r6, #10
 8004d1c:	d1df      	bne.n	8004cde <__swbuf_r+0x2e>
 8004d1e:	4621      	mov	r1, r4
 8004d20:	4628      	mov	r0, r5
 8004d22:	f7ff ff9d 	bl	8004c60 <_fflush_r>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d0d9      	beq.n	8004cde <__swbuf_r+0x2e>
 8004d2a:	e7d6      	b.n	8004cda <__swbuf_r+0x2a>

08004d2c <__swsetup_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4b29      	ldr	r3, [pc, #164]	@ (8004dd4 <__swsetup_r+0xa8>)
 8004d30:	4605      	mov	r5, r0
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	460c      	mov	r4, r1
 8004d36:	b118      	cbz	r0, 8004d40 <__swsetup_r+0x14>
 8004d38:	6a03      	ldr	r3, [r0, #32]
 8004d3a:	b90b      	cbnz	r3, 8004d40 <__swsetup_r+0x14>
 8004d3c:	f7ff fa3e 	bl	80041bc <__sinit>
 8004d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d44:	0719      	lsls	r1, r3, #28
 8004d46:	d422      	bmi.n	8004d8e <__swsetup_r+0x62>
 8004d48:	06da      	lsls	r2, r3, #27
 8004d4a:	d407      	bmi.n	8004d5c <__swsetup_r+0x30>
 8004d4c:	2209      	movs	r2, #9
 8004d4e:	602a      	str	r2, [r5, #0]
 8004d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d54:	81a3      	strh	r3, [r4, #12]
 8004d56:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5a:	e033      	b.n	8004dc4 <__swsetup_r+0x98>
 8004d5c:	0758      	lsls	r0, r3, #29
 8004d5e:	d512      	bpl.n	8004d86 <__swsetup_r+0x5a>
 8004d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d62:	b141      	cbz	r1, 8004d76 <__swsetup_r+0x4a>
 8004d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d68:	4299      	cmp	r1, r3
 8004d6a:	d002      	beq.n	8004d72 <__swsetup_r+0x46>
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f7ff fb2d 	bl	80043cc <_free_r>
 8004d72:	2300      	movs	r3, #0
 8004d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6063      	str	r3, [r4, #4]
 8004d82:	6923      	ldr	r3, [r4, #16]
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	f043 0308 	orr.w	r3, r3, #8
 8004d8c:	81a3      	strh	r3, [r4, #12]
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	b94b      	cbnz	r3, 8004da6 <__swsetup_r+0x7a>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9c:	d003      	beq.n	8004da6 <__swsetup_r+0x7a>
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 f84f 	bl	8004e44 <__smakebuf_r>
 8004da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004daa:	f013 0201 	ands.w	r2, r3, #1
 8004dae:	d00a      	beq.n	8004dc6 <__swsetup_r+0x9a>
 8004db0:	2200      	movs	r2, #0
 8004db2:	60a2      	str	r2, [r4, #8]
 8004db4:	6962      	ldr	r2, [r4, #20]
 8004db6:	4252      	negs	r2, r2
 8004db8:	61a2      	str	r2, [r4, #24]
 8004dba:	6922      	ldr	r2, [r4, #16]
 8004dbc:	b942      	cbnz	r2, 8004dd0 <__swsetup_r+0xa4>
 8004dbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004dc2:	d1c5      	bne.n	8004d50 <__swsetup_r+0x24>
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
 8004dc6:	0799      	lsls	r1, r3, #30
 8004dc8:	bf58      	it	pl
 8004dca:	6962      	ldrpl	r2, [r4, #20]
 8004dcc:	60a2      	str	r2, [r4, #8]
 8004dce:	e7f4      	b.n	8004dba <__swsetup_r+0x8e>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e7f7      	b.n	8004dc4 <__swsetup_r+0x98>
 8004dd4:	24000038 	.word	0x24000038

08004dd8 <_sbrk_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d06      	ldr	r5, [pc, #24]	@ (8004df4 <_sbrk_r+0x1c>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	f7fb fe5c 	bl	8000aa0 <_sbrk>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_sbrk_r+0x1a>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_sbrk_r+0x1a>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	2400029c 	.word	0x2400029c

08004df8 <__swhatbuf_r>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e00:	2900      	cmp	r1, #0
 8004e02:	b096      	sub	sp, #88	@ 0x58
 8004e04:	4615      	mov	r5, r2
 8004e06:	461e      	mov	r6, r3
 8004e08:	da0d      	bge.n	8004e26 <__swhatbuf_r+0x2e>
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e10:	f04f 0100 	mov.w	r1, #0
 8004e14:	bf14      	ite	ne
 8004e16:	2340      	movne	r3, #64	@ 0x40
 8004e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	6031      	str	r1, [r6, #0]
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	b016      	add	sp, #88	@ 0x58
 8004e24:	bd70      	pop	{r4, r5, r6, pc}
 8004e26:	466a      	mov	r2, sp
 8004e28:	f000 f848 	bl	8004ebc <_fstat_r>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	dbec      	blt.n	8004e0a <__swhatbuf_r+0x12>
 8004e30:	9901      	ldr	r1, [sp, #4]
 8004e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e3a:	4259      	negs	r1, r3
 8004e3c:	4159      	adcs	r1, r3
 8004e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e42:	e7eb      	b.n	8004e1c <__swhatbuf_r+0x24>

08004e44 <__smakebuf_r>:
 8004e44:	898b      	ldrh	r3, [r1, #12]
 8004e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e48:	079d      	lsls	r5, r3, #30
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	d507      	bpl.n	8004e60 <__smakebuf_r+0x1c>
 8004e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	6123      	str	r3, [r4, #16]
 8004e58:	2301      	movs	r3, #1
 8004e5a:	6163      	str	r3, [r4, #20]
 8004e5c:	b003      	add	sp, #12
 8004e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e60:	ab01      	add	r3, sp, #4
 8004e62:	466a      	mov	r2, sp
 8004e64:	f7ff ffc8 	bl	8004df8 <__swhatbuf_r>
 8004e68:	9f00      	ldr	r7, [sp, #0]
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7ff fb18 	bl	80044a4 <_malloc_r>
 8004e74:	b948      	cbnz	r0, 8004e8a <__smakebuf_r+0x46>
 8004e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7a:	059a      	lsls	r2, r3, #22
 8004e7c:	d4ee      	bmi.n	8004e5c <__smakebuf_r+0x18>
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	f043 0302 	orr.w	r3, r3, #2
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	e7e2      	b.n	8004e50 <__smakebuf_r+0xc>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	6020      	str	r0, [r4, #0]
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	9b01      	ldr	r3, [sp, #4]
 8004e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e9a:	b15b      	cbz	r3, 8004eb4 <__smakebuf_r+0x70>
 8004e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 f81d 	bl	8004ee0 <_isatty_r>
 8004ea6:	b128      	cbz	r0, 8004eb4 <__smakebuf_r+0x70>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	431d      	orrs	r5, r3
 8004eb8:	81a5      	strh	r5, [r4, #12]
 8004eba:	e7cf      	b.n	8004e5c <__smakebuf_r+0x18>

08004ebc <_fstat_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d07      	ldr	r5, [pc, #28]	@ (8004edc <_fstat_r+0x20>)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	602b      	str	r3, [r5, #0]
 8004eca:	f7fb fdc0 	bl	8000a4e <_fstat>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	d102      	bne.n	8004ed8 <_fstat_r+0x1c>
 8004ed2:	682b      	ldr	r3, [r5, #0]
 8004ed4:	b103      	cbz	r3, 8004ed8 <_fstat_r+0x1c>
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	bd38      	pop	{r3, r4, r5, pc}
 8004eda:	bf00      	nop
 8004edc:	2400029c 	.word	0x2400029c

08004ee0 <_isatty_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d06      	ldr	r5, [pc, #24]	@ (8004efc <_isatty_r+0x1c>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	f7fb fdbf 	bl	8000a6e <_isatty>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_isatty_r+0x1a>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_isatty_r+0x1a>
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	2400029c 	.word	0x2400029c

08004f00 <_init>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	bf00      	nop
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr

08004f0c <_fini>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	bf00      	nop
 8004f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f12:	bc08      	pop	{r3}
 8004f14:	469e      	mov	lr, r3
 8004f16:	4770      	bx	lr
